/*!
 * LMV v7.37.0
 * 
 * Copyright 2021 Autodesk, Inc.
 * All rights reserved.
 * 
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 * 
 * Autodesk Forge Viewer Usage Limitations:
 * 
 * The Autodesk Forge viewer can only be used to view files generated by
 * Autodesk Forge services. The Autodesk Forge Viewer JavaScript must be
 * delivered from an Autodesk hosted URL.
 */
Autodesk.Extensions.DataVisualization =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./extensions/DataVisualization/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./extensions/DataVisualization/Constants.js":
/*!***************************************************!*\
  !*** ./extensions/DataVisualization/Constants.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  MOUSE_HOVERING: "HYPERION_OBJECT_HOVERING",
  MOUSE_CLICK: "HYPERION_OBJECT_CLICK" };

/***/ }),

/***/ "./extensions/DataVisualization/CustomViewables.js":
/*!*********************************************************!*\
  !*** ./extensions/DataVisualization/CustomViewables.js ***!
  \*********************************************************/
/*! exports provided: ViewableStyle, SpriteViewable, CustomViewable, ViewableData, ViewableType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewableStyle", function() { return ViewableStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpriteViewable", function() { return SpriteViewable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomViewable", function() { return CustomViewable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewableData", function() { return ViewableData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewableType", function() { return ViewableType; });
/* harmony import */ var _SpriteAtlas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SpriteAtlas */ "./extensions/DataVisualization/SpriteAtlas.js");
function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

var ViewableType = {
  SPRITE: 1,
  GEOMETRY: 2 };


/**
                  * A visual style definition for a CustomViewable object.
                  *
                  * @class
                  * @memberof Autodesk.Viewing.Extensions.DataVisualization
                  * @alias Autodesk.Viewing.Extensions.DataVisualization.ViewableStyle
                  */var
ViewableStyle =
/**
                 * Constructs an instance of `ViewableStyle` object
                 *
                 * @param {string} id A unique identifier used to identify this instance
                 * of `ViewableStyle`. This identifier is not used internally by the extension.
                 * @param {number} type The type of viewable. Possible values are listed
                 * in `ViewableType`.
                 * @param {THREE.Color} color The color of the viewable, default to white.
                 * @param {string} url The URL of the sprite to be used for the viewable.
                 * Image formats supported are the same as those of `HTMLImageElement`.
                 * @param {THREE.Color} highlightedColor The highlighted color of the viewable,
                 * default to white. This color will be used when a `CustomViewable` is 
                 * highlighted with a call to `highlightViewables` API.
                 * @param {string} highlightedUrl The URL of the highlighted sprite to be used
                 * for the viewable. This sprite will be used when a `CustomViewable` is 
                 * highlighted with a call to `highlightViewables` API. Image formats
                 * supported are the same as those of `HTMLImageElement`.
                 *
                 * @example
                 *  const white = 0xffffff;
                 *  const iconUrl = "http://localhost:9081/images/device-type-01.svg";
                 *
                 *  const style = new Autodesk.DataVisualization.ViewableStyle(
                 *      "DeviceType01",
                 *      Autodesk.DataVisualization.ViewableType.SPRITE,
                 *      new THREE.Color(white),
                 *      iconUrl
                 *  );
                 */
function ViewableStyle(
id)





{var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ViewableType.SPRITE;var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Color(0xffffff);var url = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";var highlightedColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new THREE.Color(0xffffff);var highlightedUrl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";_classCallCheck(this, ViewableStyle);
  this.id = id;
  this.type = type;
  this.color = color;
  this.url = url;
  this.highlightedColor = highlightedColor;
  this.highlightedUrl = highlightedUrl;
};


/**
    * The generic base class of custom viewable types.
    *
    * @class
    * @memberof Autodesk.Viewing.Extensions.DataVisualization
    * @alias Autodesk.Viewing.Extensions.DataVisualization.CustomViewable
    */var
CustomViewable = /*#__PURE__*/function () {
  /**
                                            * Constructs an instance of `CustomViewable` object. This class is not meant to be
                                            * used directly, use the `SpriteViewable` class instead.
                                            *
                                            * @param {THREE.Vector3} position The position of the viewable in world coordinates.
                                            * @param {ViewableStyle} style The style definition of this custom viewable object.
                                            * @param {number} dbId The `DbId` of this custom viewable object. This value is used
                                            * to identify the viewable when user input events such as mouse clicks are handled.
                                            */
  function CustomViewable(position, style, dbId) {_classCallCheck(this, CustomViewable);
    this._style = style;
    this._position = position;
    this._dbId = dbId;
  }

  /**
     * The style definition of this viewable object.
     * @returns {ViewableStyle} The style definition of this viewable object.
     */_createClass(CustomViewable, [{ key: "style", get: function get()
    {
      return this._style;
    }

    /**
       * The position of the viewable object in world coordinates.
       * @returns {THREE.Vector3} The position of the viewable object in world coordinates.
       */ }, { key: "position", get: function get()
    {
      return this._position;
    }

    /**
       * The `DbId` of this viewable object. This value is used to identify the
       * viewable when user input events such as mouse clicks are handled.
       * @returns {number} The `DbId` of this viewable object. This value is used to
       * identify the viewable when user input events such as mouse clicks are handled.
       */ }, { key: "dbId", get: function get()
    {
      return this._dbId;
    } }]);return CustomViewable;}();


/**
                                      * A sprite (image) based custom viewable object.
                                      *
                                      * @class
                                      * @memberof Autodesk.Viewing.Extensions.DataVisualization
                                      * @alias Autodesk.Viewing.Extensions.DataVisualization.SpriteViewable
                                      * @augments CustomViewable
                                      */var
SpriteViewable = /*#__PURE__*/function (_CustomViewable) {_inherits(SpriteViewable, _CustomViewable);var _super = _createSuper(SpriteViewable);
  /**
                                                                                                                                                 * Constructs an instance of `SpriteViewable` object
                                                                                                                                                 *
                                                                                                                                                 * @param {THREE.Vector3} position The position of the viewable in world coordinates.
                                                                                                                                                 * @param {ViewableStyle} style The style definition of this custom viewable object.
                                                                                                                                                 * @param {number} dbId The `DbId` of this custom viewable object. This value is used
                                                                                                                                                 * to identify the viewable when user input events such as mouse clicks are handled.
                                                                                                                                                 *
                                                                                                                                                 * @example
                                                                                                                                                 *  const dbId = 100;
                                                                                                                                                 *  const positions = [
                                                                                                                                                 *      {
                                                                                                                                                 *          x: -97.94954550038506,
                                                                                                                                                 *          y: -50.21776820050724,
                                                                                                                                                 *          z: 12.444056161946492,
                                                                                                                                                 *      },
                                                                                                                                                 *      {
                                                                                                                                                 *          x: -12.59026829087645,
                                                                                                                                                 *          y: -50.20446526068116,
                                                                                                                                                 *          z: 14.35526278705748,
                                                                                                                                                 *      },
                                                                                                                                                 *  ];
                                                                                                                                                 *
                                                                                                                                                 *  const viewables = [];
                                                                                                                                                 *
                                                                                                                                                 *  // Create multiple SpriteViewable that share the same 'style'.
                                                                                                                                                 *  positions.forEach((pos) => {
                                                                                                                                                 *      const viewable = new Autodesk.DataVisualization.SpriteViewable(
                                                                                                                                                 *          pos, style, dbId);
                                                                                                                                                 *
                                                                                                                                                 *      dbId++; // Assign each viewable a unique identifier
                                                                                                                                                 *      viewables.push(viewable);
                                                                                                                                                 *  });
                                                                                                                                                 */
  function SpriteViewable(position, style, dbId) {_classCallCheck(this, SpriteViewable);
    console.assert(style.type == ViewableType.SPRITE);return _super.call(this,
    position, style, dbId);
  }

  /**
     * The type of this `SpriteViewable` object. This value will always
     * be equal to `ViewableType.SPRITE`.
     * @returns {number} The type of this `SpriteViewable` object.
     * This value will always be equal to `ViewableType.SPRITE`.
     */_createClass(SpriteViewable, [{ key: "type", get: function get()
    {
      return ViewableType.SPRITE;
    }

    /**
       * The color of this `SpriteViewable` object. The color is multiplied with
       * the sprite pixel colors in shader prior to display.
       * @returns {THREE.Color} The color of this `SpriteViewable` object. The color
       * is multiplied with the sprite pixel colors in shader prior to display.
       */ }, { key: "color", get: function get()
    {
      return this.style.color;
    }

    /**
       * The color of this sprite viewable object. The color is multiplied with the
       * highlighted sprite pixel colors in shader for display.
       * @returns {THREE.Color} The color of this sprite viewable object. The color is
       * multiplied with the highlighted sprite pixel colors in shader for display.
       */ }, { key: "highlightedColor", get: function get()
    {
      return this.style.highlightedColor;
    } }]);return SpriteViewable;}(CustomViewable);


/**
                                                    * An object that manages a collection of `CustomViewable` object. A `ViewableData`
                                                    * object is added for display through `DataVisualization.addViewables` API before
                                                    * any of its `CustomViewable` can be displayed.
                                                    *
                                                    * @class
                                                    * @memberof Autodesk.Viewing.Extensions.DataVisualization
                                                    * @alias Autodesk.Viewing.Extensions.DataVisualization.ViewableData
                                                    */var
ViewableData = /*#__PURE__*/function () {
  /**
                                          * Constructs an instance of `ViewableData` object
                                          *
                                          * @param {Object} options The options to configure `ViewableData` object with.
                                          * @param {number} options.atlasWidth The initial sprite atlas width in
                                          * pixels, to accommodate subsequent `CustomViewable` object that are added.
                                          * If not specified, the atlas width of `1920` pixels is used.
                                          * @param {number} options.atlasHeight The initial sprite atlas height in
                                          * pixels, to accommodate subsequent `CustomViewable` object that are added.
                                          * If not specified, the atlas height of `1080` pixels is used.
                                          *
                                          * @example
                                          *  const viewableData = new Autodesk.DataVisualization.ViewableData({
                                          *    atlasWidth: 512,
                                          *    atlasHeight: 512
                                          *  });
                                          */
  function ViewableData() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};_classCallCheck(this, ViewableData);
    this._styleMap = new Map();
    this._viewablesMap = new Map();
    this._spriteAtlas = new _SpriteAtlas__WEBPACK_IMPORTED_MODULE_0__["SpriteAtlas"](
    options.atlasWidth || 1920,
    options.atlasHeight || 1080,
    2);

  }

  /**
     * All the `CustomViewable` that are added to this `ViewableData` object.
     * @returns {CustomViewable[]} All the `CustomViewable` that are added to
     * this `ViewableData` object.
     */_createClass(ViewableData, [{ key: "addViewable",












    /**
                                                          * Adds a custom viewable object to the `ViewableData`.
                                                          *
                                                          * @param {CustomViewable} viewable The custom viewable to be added
                                                          * to the `ViewableData` object.
                                                          */value: function addViewable(
    viewable) {
      if (viewable.type == ViewableType.SPRITE) {
        this._spriteAtlas.addSprite(viewable.style.url);
        if (viewable.style.highlightedUrl) {
          this._spriteAtlas.addSprite(viewable.style.highlightedUrl);
        }
      }

      this._viewablesMap.set(viewable.dbId, viewable);
    }

    /**
       * Get the UV values of a viewable from the sprite atlas
       *
       * @param {String} dbId Id of the viewable to obtain the UV of.
       * @param {boolean} highlighted Boolean value to obtain the normal sprite UV or the highlighted version
       * @returns {Object} UV values of the requested viewable
       */ }, { key: "getViewableUV", value: function getViewableUV(
    dbId, highlighted) {
      var style = this._viewablesMap.get(dbId).style;
      if (highlighted && style.highlightedUrl) {
        return this._spriteAtlas.spriteUV(style.highlightedUrl);
      } else {
        return this._spriteAtlas.spriteUV(style.url);
      }
    }

    /**
       * Get the color values of a viewable
       *
       * @param {String} dbId Id of the viewable to obtain the UV of.
       * @param {boolean} highlighted Boolean value to obtain the normal sprite UV or the highlighted version
       * @returns {THREE.Color} Color of the requested viewable
       */ }, { key: "getViewableColor", value: function getViewableColor(
    dbId, highlighted) {
      var style = this._viewablesMap.get(dbId).style;
      if (highlighted) {
        return style.highlightedColor;
      } else {
        return style.color;
      }
    }

    /**
       * Marks the `ViewableData` as completed. The final sprite atlas will be
       * generated based on all the `CustomViewable` objects added prior to this.
       * This function must be called before the `ViewableData` is added for display
       * through `DataVisualization.addViewables` API.
       */ }, { key: "finish", value: function () {var _finish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (

                  this._spriteAtlas.finish());case 2:case "end":return _context.stop();}}}, _callee, this);}));function finish() {return _finish.apply(this, arguments);}return finish;}() }, { key: "viewables", get: function get() {return _toConsumableArray(this._viewablesMap.values());} /**
                                                                                                                                                                                                                                                                                                 * @private
                                                                                                                                                                                                                                                                                                 * @returns {SpriteAtlas} For internal use only.
                                                                                                                                                                                                                                                                                                 */ }, { key: "spriteAtlas", get: function get() {return this._spriteAtlas;} }]);return ViewableData;}();


/***/ }),

/***/ "./extensions/DataVisualization/ModelStructureInfo.js":
/*!************************************************************!*\
  !*** ./extensions/DataVisualization/ModelStructureInfo.js ***!
  \************************************************************/
/*! exports provided: Device, Room, LevelRoomsMap, ModelStructureInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Device", function() { return Device; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Room", function() { return Room; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LevelRoomsMap", function() { return LevelRoomsMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelStructureInfo", function() { return ModelStructureInfo; });
/* harmony import */ var _heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./heatmap/SurfaceShadingData */ "./extensions/DataVisualization/heatmap/SurfaceShadingData.js");
/* harmony import */ var _heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_0__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

/**
                                 * The basic specification of a device that includes the position of the device,
                                 * and the sensor types that it exposes. Client-code can specify more properties
                                 * in the `Device` object, but `ModelStructureInfo` only makes use of its
                                 * position and sensor types.
                                 *
                                 * @class
                                 * @memberof Autodesk.Viewing.Extensions.DataVisualization
                                 * @alias Autodesk.Viewing.Extensions.DataVisualization.Device
                                 */var
Device =
/**
          * Constructs an instance of `Device` object.
          *
          * @param {string|number} id The identifier of this instance of `Device`
          * @param {number} x The x coordinate of the device in world space
          * @param {number} y The y coordinate of the device in world space
          * @param {number} z The z coordinate of the device in world space
          * @param {string[]} sensorTypes The list of sensor types this device
          * exposes. A device can expose multiple sensor types such as
          * temperature, humidity, etc.
          *
          * @example
          *  // Define a CustomDevice type that contains a description
          *  function CustomDevice(id, x, y, z, sensorTypes) {
          *    const device = new Autodesk.DataVisualization.Device(id, x, y, z, sensorTypes);
          *    Object.assign(this, device);
          *
          *    CustomDevice.prototype.setDescription = function(desc) {
          *      this.desc = desc;
          *    }
          *  }
          *
          *  // A custom device that exposes two sensor types
          *  const sensorTypes = ["Temperature", "Humidity"];
          *
          *  // Get device position through a custom defined mechanism
          *  const [x, y, z] = getDevicePosition("dev01");
          *
          *  // Create an instance of CustomDevice object
          *  const device = new CustomDevice("dev01", x, y, z, sensorTypes);
          */
function Device(id, x, y, z, sensorTypes) {_classCallCheck(this, Device);
  this.id = id;
  sensorTypes = sensorTypes || [];
  this.sensorTypes = sensorTypes.slice(0);
  this.position = new THREE.Vector3(x, y, z);
};


/**
    * A class that represents a room found in the model. See
    * {@link Autodesk.Viewing.Extensions.DataVisualization.LevelRoomsMap|LevelRoomsMap} for more details.
    *
    * @class
    * @memberof Autodesk.Viewing.Extensions.DataVisualization
    * @alias Autodesk.Viewing.Extensions.DataVisualization.Room
    */var
Room = /*#__PURE__*/function () {
  /**
                                  * Constructs an instance of `Room` object. Client code should not construct
                                  * rooms directly, but to obtain them from `LevelRoomsMap.getRoomsOnLevel` API.
                                  *
                                  * @param {number} id The `DbId` of the room
                                  * @param {string} name The name of the room
                                  * @param {THREE.Box3} bounds The bounding box of the room
                                  */
  function Room(id, name, bounds) {_classCallCheck(this, Room);
    this._id = id;
    this._name = name;
    this._bounds = bounds;

    /**
                            * @private
                            * @type {Device[]}
                            */
    this._devices = [];
  }

  /**
     * @private
     * @param {{properties: any[]}} value For internal use only
     */_createClass(Room, [{ key: "addDevice",















































    /**
                                                * @private
                                                * For internal use only. Adds a client-defined `Device` to the room
                                                *
                                                * @param {Device} device The `Device` to be added to the room
                                                */value: function addDevice(
    device) {
      this._devices.push(device);
    } }, { key: "info", set: function set(value) {this._info = value;} /**
                                                                        * Returns the `DbId` of the room
                                                                        * @returns {number} The `DbId` of the room
                                                                        */, /**
                                                                             * @private
                                                                             * @returns {{properties: any[]}} For internal use only
                                                                             */get: function get() {return this._info;} }, { key: "id", get: function get() {return this._id;} /**
                                                                                                                                                                                * Returns the name of the room
                                                                                                                                                                                * @returns {string} The name of the room
                                                                                                                                                                                */ }, { key: "name", get: function get() {return this._name;} /**
                                                                                                                                                                                                                                               * Returns the bounding box of the room
                                                                                                                                                                                                                                               * @returns {THREE.Box3} The bounding box of the room
                                                                                                                                                                                                                                               */ }, { key: "bounds", get: function get() {return this._bounds;} /**
                                                                                                                                                                                                                                                                                                                  * Gets the list of all `Device` objects in the room. If the room does
                                                                                                                                                                                                                                                                                                                  * not contain any devices, an empty array will be returned.
                                                                                                                                                                                                                                                                                                                  * @returns {Device[]} The list of all `Device` objects in the room.
                                                                                                                                                                                                                                                                                                                  * If the room does not contain any devices, an empty array
                                                                                                                                                                                                                                                                                                                  * will be returned.
                                                                                                                                                                                                                                                                                                                  */ }, { key: "devices", get: function get() {return this._devices;} }]);return Room;}(); /**
                                                                                                                                                                                                                                                                                                                                                                                                            * A class that maps level names to one or more `Room` objects that are found
                                                                                                                                                                                                                                                                                                                                                                                                            * on the corresponding levels. See
                                                                                                                                                                                                                                                                                                                                                                                                            * {@link Autodesk.Viewing.Extensions.DataVisualization.Room|Room} for details
                                                                                                                                                                                                                                                                                                                                                                                                            *
                                                                                                                                                                                                                                                                                                                                                                                                            * @class
                                                                                                                                                                                                                                                                                                                                                                                                            * @memberof Autodesk.Viewing.Extensions.DataVisualization
                                                                                                                                                                                                                                                                                                                                                                                                            * @alias Autodesk.Viewing.Extensions.DataVisualization.LevelRoomsMap
                                                                                                                                                                                                                                                                                                                                                                                                            *
                                                                                                                                                                                                                                                                                                                                                                                                            *
                                                                                                                                                                                                                                                                                                                                                                                                            * @example
                                                                                                                                                                                                                                                                                                                                                                                                            *  // Gets the level-to-rooms mapping from the structural model
                                                                                                                                                                                                                                                                                                                                                                                                            *  const info = new Autodesk.DataVisualization.ModelStructureInfo(model);
                                                                                                                                                                                                                                                                                                                                                                                                            *  const levelRoomsMap = await info.getLevelRoomsMap();
                                                                                                                                                                                                                                                                                                                                                                                                            */var LevelRoomsMap = /*#__PURE__*/function () {function LevelRoomsMap() {_classCallCheck(this, LevelRoomsMap);}_createClass(LevelRoomsMap, [{ key: "addRoomToLevel", /**
private
dds a `Room` object to a named level.

param {string} levelName Name of the level to add the `Room` to.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * @param {Autodesk.Viewing.Extensions.DataVisualization.Room} room The `Room`
object to be added to the level.

alias Autodesk.Viewing.Extensions.DataVisualization.LevelRoomsMap#addRoomToLevel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   */value: function addRoomToLevel(levelName, room) {if (!this[levelName]) {this[levelName] = [];}this[levelName].push(room);} /**
ets all the rooms on a given level.

param {string} levelName Name of the level for which rooms
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 * are to be retrieved.
param {boolean} onlyRoomsWithDevices Set this to `true` to return only rooms
with devices in them, or `false` to return all rooms on the level.
returns {Room[]} List of all the rooms found on the level, or an empty list
if no room is found.

alias Autodesk.Viewing.Extensions.DataVisualization.LevelRoomsMap#getRoomsOnLevel

example
et all Room objects on "Level 1", with or without devices
const roomsOnLevelOne = levelRoomsMap.getRoomsOnLevel("Level 1", false);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *
et only Room objects on "Level 1" that contain devices
const roomsWithDevices = levelRoomsMap.getRoomsOnLevel("Level 1", true);
}, { key: "getRoomsOnLevel", value: function getRoomsOnLevel(levelName, onlyRoomsWithDevices) {/** @type {Room[]} */var rooms = this[levelName] || [];
      if (onlyRoomsWithDevices) {
        return rooms.filter(function (room) {return !!room.devices;});
      } else {
        return rooms;
      }
    } }]);return LevelRoomsMap;}();


/**
                                     * Data class to deal with the structural information of a model.
                                     *
                                     * @class
                                     * @memberof Autodesk.Viewing.Extensions.DataVisualization
                                     * @alias Autodesk.Viewing.Extensions.DataVisualization.ModelStructureInfo
                                     */var
ModelStructureInfo = /*#__PURE__*/function () {
  /**
                                                * Constructs an instance of `ModelStructureInfo` object.
                                                *
                                                * @param {Model} model The model from which structural information
                                                * is to be generated.
                                                *
                                                * @example
                                                *  function onModelLoaded(event) {
                                                *    const model = event.model;
                                                *    const info = new Autodesk.DataVisualization.ModelStructureInfo(model);
                                                *  }
                                                *
                                                *  // Register to be notified when the model is fully loaded
                                                *  viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT,
                                                *    onModelLoaded, { once: true });
                                                */
  function ModelStructureInfo(model) {_classCallCheck(this, ModelStructureInfo);
    this.model = model;

    /**
                         * @private
                         * @type {Room[]}
                         */
    this.rooms = null;
  }

  /**
     * @private
     * Given a parent node, gets the immediate child nodes by its name.
     *
     * @param {string} name Name to filter the child node with.
     * @param {number} [parentId] An optional parent node `DbId` for which the
     * immediate child nodes are to be searched. Root ID of the model will
     * be used if this parameter is omitted.
     *
     * @returns {Array.<number>} A list of all child node `DbId`s that match
     * the filter name.
     * @memberof Autodesk.Viewing.Extensions.DataVisualization
     * @alias Autodesk.Viewing.Extensions.DataVisualization.ModelStructureInfo#getImmediateChildNodesByName
     */_createClass(ModelStructureInfo, [{ key: "getImmediateChildNodesByName", value: function getImmediateChildNodesByName(
    name, parentId) {
      var model = this.model;
      var it = model.getInstanceTree();
      parentId = parentId == undefined ? it.getRootId() : parentId;

      var childIds = [];
      it.enumNodeChildren(
      parentId,
      function (id) {
        var n = it.getNodeName(id, true);

        if (n == name) {
          childIds.push(id);
        }
      },
      false);


      return childIds;
    }

    /**
       * Gets the structural info and build level-to-rooms map.
       *
       * @param {boolean} [keepRoomDetail=false] Whether to keep the room
       * detailed properties after this call completes.
       * @returns {LevelRoomsMap} The level-to-rooms map
       */ }, { key: "getLevelRoomsMap", value: function () {var _getLevelRoomsMap = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {var _this = this;var keepRoomDetail,levelRoomsMap,rooms,_args = arguments;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                keepRoomDetail = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;if (
                this.levelRoomsMap) {_context.next = 8;break;}
                levelRoomsMap = new LevelRoomsMap();_context.next = 5;return (
                  this.getRoomList());case 5:rooms = _context.sent;
                rooms.forEach(function (room) {
                  var levelName = _this.getLevel(room);
                  if (!keepRoomDetail) {
                    room.info = undefined;
                  }

                  if (levelName != undefined) {
                    levelRoomsMap.addRoomToLevel(levelName, room);
                  }
                });

                this.levelRoomsMap = levelRoomsMap;case 8:return _context.abrupt("return",


                this.levelRoomsMap);case 9:case "end":return _context.stop();}}}, _callee, this);}));function getLevelRoomsMap() {return _getLevelRoomsMap.apply(this, arguments);}return getLevelRoomsMap;}()


    /**
                                                                                                                                                                                                                * @private
                                                                                                                                                                                                                * Gets the name of the level from the given room, if any is specified.
                                                                                                                                                                                                                *
                                                                                                                                                                                                                * @param {Room} room The room for which the level name is to be retrieved.
                                                                                                                                                                                                                * @returns {string|undefined} The name of level if one is specified,
                                                                                                                                                                                                                * or `undefined` otherwise.
                                                                                                                                                                                                                */ }, { key: "getLevel", value: function getLevel(
    room) {
      if (room && room.info && room.info.properties) {
        var prop = room.info.properties.find(function (p) {
          return p.type == 20 && p.attributeName == "Level";
        });

        return prop ? prop.displayValue : undefined;
      }
    }

    /**
       * @private
       * Gets a list of rooms found in the current model.
       *
       * @returns {Room[]}
       */ }, { key: "getRoomList", value: function () {var _getRoomList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {var _this2 = this;var roomNode, model, rooms, roomsRootId, it, promises;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if (

                this.rooms) {_context2.next = 9;break;}
                roomNode = this.getImmediateChildNodesByName("Rooms");
                model = this.model;

                /** @type {Room[]} */
                rooms = [];

                if (roomNode && roomNode.length > 0) {
                  roomsRootId = roomNode[0];

                  it = model.getInstanceTree();
                  it.enumNodeChildren(
                  roomsRootId,
                  function (id) {
                    var name = it.getNodeName(id, true);
                    var bounds = _this2.getRoomBounds(id);
                    rooms.push(new Room(id, name, bounds));
                  },
                  false);

                }

                // Extract detailed room properties.
                promises = rooms.map(function (room) {
                  return new Promise(function (resolve, reject) {
                    model.getProperties2(
                    room.id,
                    function (info) {
                      room.info = info;
                      resolve(room);
                    },
                    function (error) {
                      resolve(room);
                    });

                  });
                });_context2.next = 8;return (

                  Promise.all(promises));case 8:
                this.rooms = rooms;case 9:return _context2.abrupt("return",


                this.rooms);case 10:case "end":return _context2.stop();}}}, _callee2, this);}));function getRoomList() {return _getRoomList.apply(this, arguments);}return getRoomList;}()


    /**
                                                                                                                                                                                            * @private
                                                                                                                                                                                            * Gets the bounding box of a room given its `DbId`. The bounding box is
                                                                                                                                                                                            * expanded to include bounding boxes of all the fragments that made up
                                                                                                                                                                                            * the room.
                                                                                                                                                                                            *
                                                                                                                                                                                            * @param {number} roomId The `DbId` of the room.
                                                                                                                                                                                            * @returns {THREE.Box3} The bounding box of the room with given `DbId`.
                                                                                                                                                                                            */ }, { key: "getRoomBounds", value: function getRoomBounds(
    roomId) {
      var bounds = new THREE.Box3();
      var fragBounds = new THREE.Box3();
      var it = this.model.getInstanceTree();
      var fragList = this.model.getFragmentList();

      it.enumNodeFragments(
      roomId,
      function (fragId) {
        fragList.getWorldBounds(fragId, fragBounds);
        bounds.union(fragBounds);
      },
      true);


      return bounds;
    }

    /**
       * @private
       * Assign cient-defined devices to rooms based on their 3D space positions
       * and the bounding box of each room.
       *
       * @param {Device[]} devices The devices to be assigned to loaded rooms.
       */ }, { key: "mapDevicesInRoom", value: function () {var _mapDevicesInRoom = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {var devices,rooms,i,room,j,device,_args3 = arguments;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
                devices = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : [];_context3.next = 3;return (



                  this.getRoomList());case 3:rooms = _context3.sent;
                devices = devices.slice(0);

                for (i = 0; devices.length > 0 && i < rooms.length; i++) {
                  room = rooms[i];

                  for (j = 0; j < devices.length; j++) {
                    device = devices[j];

                    if (this.roomGeomContainsPoint(room, device.position)) {
                      // Build bi-directional references
                      device.roomId = room.id;
                      room.addDevice(device);

                      // Remove the device from the list, to avoid future iteration
                      devices.splice(j, 1);
                      j--;
                    }
                  }
                }case 6:case "end":return _context3.stop();}}}, _callee3, this);}));function mapDevicesInRoom() {return _mapDevicesInRoom.apply(this, arguments);}return mapDevicesInRoom;}()


    /**
                                                                                                                                                                                               * Assigns client-defined devices to rooms based on their 3D space positions
                                                                                                                                                                                               * and the bounding box of each room, then generate hierarchical shading data
                                                                                                                                                                                               * based on the assignment.
                                                                                                                                                                                               *
                                                                                                                                                                                               * @param {Device[]} devices The devices to be assigned to loaded rooms.
                                                                                                                                                                                               * @param {LevelRoomsMap} levels The optional level-to-rooms map. If none
                                                                                                                                                                                               * is specified, one will be generated internally.
                                                                                                                                                                                               * @returns {SurfaceShadingData} The resulting `SurfaceShadingData` object.
                                                                                                                                                                                               *
                                                                                                                                                                                               * @alias Autodesk.Viewing.Extensions.DataVisualization.ModelStructureInfo#generateSurfaceShadingData
                                                                                                                                                                                               *
                                                                                                                                                                                               * @example
                                                                                                                                                                                               *  // 'devices' is a list of 'Device' objects
                                                                                                                                                                                               *  const info = new Autodesk.DataVisualization.ModelStructureInfo(model);
                                                                                                                                                                                               *  const shadingData = await info.generateSurfaceShadingData(devices);
                                                                                                                                                                                               *  dataVizExtn.setupSurfaceShading(model, shadingData);
                                                                                                                                                                                               */ }, { key: "generateSurfaceShadingData", value: function () {var _generateSurfaceShadingData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {var devices,levels,shadingData,_loop,levelName,_args4 = arguments;return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
                devices = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : [];levels = _args4.length > 1 ? _args4[1] : undefined;if (
                levels) {_context4.next = 8;break;}_context4.next = 5;return (
                  this.getLevelRoomsMap());case 5:levels = _context4.sent;_context4.next = 8;return (
                  this.mapDevicesInRoom(devices));case 8:


                shadingData = new _heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_0__["SurfaceShadingData"]();_loop = function _loop(
                levelName) {
                  var rooms = levels[levelName];
                  var subGroup = new _heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_0__["SurfaceShadingGroup"](levelName);

                  rooms.forEach(function (room) {
                    var node = new _heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_0__["SurfaceShadingNode"](room.name, room.id);
                    room.devices.forEach(function (device) {
                      node.addPoint(
                      new _heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_0__["SurfaceShadingPoint"](device.id, device.position, device.sensorTypes));

                    });

                    subGroup.addChild(node);
                  });

                  shadingData.addChild(subGroup);};for (levelName in levels) {_loop(levelName);
                }

                shadingData.initialize(this.model);return _context4.abrupt("return",
                shadingData);case 13:case "end":return _context4.stop();}}}, _callee4, this);}));function generateSurfaceShadingData() {return _generateSurfaceShadingData.apply(this, arguments);}return generateSurfaceShadingData;}()


    /**
                                                                                                                                                                                                                                          * @private
                                                                                                                                                                                                                                          * Checks if a given point is within the bounds of a room.
                                                                                                                                                                                                                                          *
                                                                                                                                                                                                                                          * @param {Room} room The room against which a point is checked.
                                                                                                                                                                                                                                          * @param {{x: number, y: number, z: number}} point The point to be checked.
                                                                                                                                                                                                                                          * @returns {boolean} `true` if the point is within the bounds of the
                                                                                                                                                                                                                                          * room, or `false` otherwise.
                                                                                                                                                                                                                                          */ }, { key: "roomGeomContainsPoint", value: function roomGeomContainsPoint(
    room, point) {
      return room.bounds && room.bounds.containsPoint(point);
    } }]);return ModelStructureInfo;}();




/***/ }),

/***/ "./extensions/DataVisualization/SceneTool.js":
/*!***************************************************!*\
  !*** ./extensions/DataVisualization/SceneTool.js ***!
  \***************************************************/
/*! exports provided: SceneTool */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SceneTool", function() { return SceneTool; });
/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants.js */ "./extensions/DataVisualization/Constants.js");
/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Constants_js__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);} /**
ool that will handle the selection/hightlight for the model created by the CustomModelScene




var av = Autodesk.Viewing;
var GlobalManagerMixin = av.GlobalManagerMixin;

var SceneTool = /*#__PURE__*/function (_av$ToolInterface) {_inherits(SceneTool, _av$ToolInterface);var _super = _createSuper(SceneTool);
  function SceneTool(viewer) {var _this;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};_classCallCheck(this, SceneTool);
    _this = _super.call(this);
    _this.names = ['HyperionTool'];

    _this.options = options;
    _this.setGlobalManager(viewer.globalManager);

    _this.viewer = viewer;
    _this.sensorModelId = 0;

    if (options.model) {
      _this.sensorModelId = options.model.id;
    }
    _this.sensorModel = options.model;

    _this.init();

    _this.hoveringDbId = -1;return _this;
  }_createClass(SceneTool, [{ key: "init", value: function init()

    {var _this2 = this;
      var viewerImpl = this.viewer.impl;

      this.activate = function (name) {
        _this2.active = true;
      };

      this.deactivate = function (name) {
        _this2.clearMarkedObject(_this2.markedFragments);
        _this2.active = false;
      };

      this.handleSingleClick = function (event, button) {
        if (button === 0) {
          var res = [];
          var vpVec = viewerImpl.clientToViewport(event.canvasX, event.canvasY);
          var dbId = viewerImpl.renderer().idAtPixel(vpVec.x, vpVec.y, res);

          if (true) {
            var test = viewerImpl.hitTestViewport(vpVec, false);
            console.log(test);
          }

          if (_this2.sensorModelId == res[1]) {
            _this2.markObject([dbId]);

            _this2.viewer.dispatchEvent({
              type: _Constants_js__WEBPACK_IMPORTED_MODULE_0__["MOUSE_CLICK"],
              dbId: dbId,
              originalEvent: event });

            return true;
          } else {
            // clear the marked fragments
            _this2.clearMarkedObject(_this2.markedFragments);
          }
        }
        return false;
      };

      this.handleDoubleClick = function (event, button) {
        return false;
      };

      this.handleButtonDown = function (event) {
        _this2.buttonDown = true;
        return false;
      };

      this.handleButtonUp = function (event) {
        _this2.buttonDown = false;
        return false;
      };

      this.handleMouseMove = function (event) {
        if (!_this2.buttonDown) {
          var vpVec = viewerImpl.clientToViewport(event.canvasX, event.canvasY);
          var res = [];
          var dbId = viewerImpl.renderer().idAtPixel(vpVec.x, vpVec.y, res);

          if (_this2.sensorModelId == res[1]) {
            if (_this2.hoveringDbId != dbId) {
              _this2.hoveringDbId = dbId;

              _this2.viewer.dispatchEvent({
                type: _Constants_js__WEBPACK_IMPORTED_MODULE_0__["MOUSE_HOVERING"],
                dbId: dbId,
                hovering: true,
                originalEvent: event });

              // dispatch the tooltip event
              return false;
            }
          } else {
            if (_this2.hoveringDbId != -1) {
              _this2.viewer.dispatchEvent({
                type: _Constants_js__WEBPACK_IMPORTED_MODULE_0__["MOUSE_HOVERING"],
                dbId: dbId,
                hovering: false,
                originalEvent: event });

            }
            _this2.hoveringDbId = -1;
          }
        } else {
          _this2.viewer.dispatchEvent({
            type: _Constants_js__WEBPACK_IMPORTED_MODULE_0__["MOUSE_HOVERING"],
            hovering: false,
            originalEvent: event });

          _this2.hoveringDbId = -1;
        }
      };

      this.markObject = function (dbIds) {
        if (!(dbIds instanceof Array)) {
          dbIds = [dbIds];
        }

        var fragments = new Set();var
        dbId2fragId = _this2.sensorModel.getInstanceTree().fragList.fragments.dbId2fragId;
        dbIds.map(function (id) {return fragments.add(dbId2fragId[id]);});

        fragments = Array.from(fragments);
        var dbIdIndex = new Set(dbIds);

        fragments.map(function (fragment) {
          var geometry = _this2.sensorModel.getInstanceTree().fragList.geoms.geoms[fragment];

          // here we need to update the attribute of the geometry
          if (geometry.attributes["id"] && geometry.attributes["flagp"]) {
            var flags = geometry.attributes["flagp"].array;
            var uvp = geometry.attributes["uvp"].array;
            var colors = geometry.attributes["color"].array;
            var ids = geometry.attributes["id"].array;
            for (var i = 0; i < ids.length; i += 3) {
              var id = ids[i] + (ids[i + 1] << 8) + (ids[i + 2] << 16);
              var index = i / 3;
              flags[index] = dbIdIndex.has(id) ? 1 : 0;
              var uv = _this2.sensorModel.getData().fragments.viewableData.getViewableUV(id, flags[index] == 1);
              if (uv) {
                uvp[index * 4] = uv.x;
                uvp[index * 4 + 1] = uv.y;
                uvp[index * 4 + 2] = uv.w;
                uvp[index * 4 + 3] = uv.h;
              }
              var color = _this2.sensorModel.getData().fragments.viewableData.getViewableColor(id, flags[index] == 1);
              if (color) {
                colors[index * 3] = color.r * 255;
                colors[index * 3 + 1] = color.g * 255;
                colors[index * 3 + 2] = color.b * 255;
              }
            }
            geometry.attributes["flagp"].needsUpdate = true;
            geometry.attributes["uvp"].needsUpdate = true;
            geometry.attributes["color"].needsUpdate = true;
          }
        });

        _this2.markedFragments = fragments;
      };

      this.clearMarkedObject = function (fragments) {
        fragments = fragments ? fragments : _this2.markedFragments;
        if (fragments) {
          fragments.map(function (fragment) {
            var geometry = _this2.sensorModel.getInstanceTree().fragList.geoms.geoms[fragment];

            // here we need to update the attribute of the geometry
            if (geometry.attributes["flagp"]) {
              var flags = geometry.attributes["flagp"].array;
              var uvp = geometry.attributes["uvp"].array;
              var colors = geometry.attributes["color"].array;
              var ids = geometry.attributes["id"].array;
              for (var i = 0; i < ids.length; i += 3) {
                var id = ids[i] + (ids[i + 1] << 8) + (ids[i + 2] << 16);
                var index = i / 3;
                flags[index] = 0;
                var uv = _this2.sensorModel.getData().fragments.viewableData.getViewableUV(id, false);
                if (uv) {
                  uvp[index * 4] = uv.x;
                  uvp[index * 4 + 1] = uv.y;
                  uvp[index * 4 + 2] = uv.w;
                  uvp[index * 4 + 3] = uv.h;
                }
                var color = _this2.sensorModel.getData().fragments.viewableData.getViewableColor(id, false);
                if (color) {
                  colors[index * 3] = color.r * 255;
                  colors[index * 3 + 1] = color.g * 255;
                  colors[index * 3 + 2] = color.b * 255;
                }
              }
              geometry.attributes["flagp"].needsUpdate = true;
              geometry.attributes["uvp"].needsUpdate = true;
              geometry.attributes["color"].needsUpdate = true;
            }
          });
          _this2.viewer.impl.invalidate(false, false, true);
        }
      };

    } }]);return SceneTool;}(av.ToolInterface);


GlobalManagerMixin.call(SceneTool.prototype);

/***/ }),

/***/ "./extensions/DataVisualization/SpriteAtlas.js":
/*!*****************************************************!*\
  !*** ./extensions/DataVisualization/SpriteAtlas.js ***!
  \*****************************************************/
/*! exports provided: SpriteAtlas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpriteAtlas", function() { return SpriteAtlas; });
/* harmony import */ var _external_maxrects_packer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./external/maxrects-packer.js */ "./extensions/DataVisualization/external/maxrects-packer.js");
/* harmony import */ var _external_maxrects_packer_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_external_maxrects_packer_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var q__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! q */ "./node_modules/q/q.js");
/* harmony import */ var q__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(q__WEBPACK_IMPORTED_MODULE_1__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}


var avp = Autodesk.Viewing.Private;var

SpriteAtlas = /*#__PURE__*/function () {
  function SpriteAtlas() {var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1920;var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1080;var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;_classCallCheck(this, SpriteAtlas);
    this.width = width;
    this.height = height;
    this.padding = padding;

    this.spritesMap = {};
    this.pending = [];
    this.images = [];

    this.logger = avp.logger;
    this.packer = new _external_maxrects_packer_js__WEBPACK_IMPORTED_MODULE_0__["MaxRectsPacker"](this.width, this.height, this.padding, {
      smart: true,
      pot: false,
      square: false,
      allowRotation: false,
      tag: false,
      border: 0 });

    this.canvas = document.createElement("canvas");
    this.hasContent = false;
  }_createClass(SpriteAtlas, [{ key: "addSprite", value: function addSprite(

    url) {var _this = this;
      if (this.spritesMap[url] == undefined) {
        var defer = q__WEBPACK_IMPORTED_MODULE_1___default.a.defer();
        var image = new Image();
        image.crossOrigin = "anonymous";

        image.onload = function () {
          _this.images.push({
            url: url,
            image: image,
            width: image.width,
            height: image.height });

          defer.resolve();
        };

        image.onerror = function (error) {
          _this.logger.error(error);
          defer.resolve();
        };

        image.src = url;
        this.spritesMap[url] = 1;
        this.pending.push(defer.promise);
      }
    } }, { key: "finish", value: function () {var _finish = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {var _this2 = this;var canvas;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (










                  q__WEBPACK_IMPORTED_MODULE_1___default.a.all(this.pending));case 2:
                canvas = this.canvas;

                this.packer.addArray(this.images);

                this.images.length = 0;
                this.packer.bins.forEach(function (bin) {
                  canvas.width = bin.width;
                  canvas.height = bin.height;

                  var ctx = canvas.getContext("2d");

                  bin.rects.forEach(function (rect) {
                    if (rect.image) {
                      ctx.drawImage(rect.image, rect.x, rect.y);
                      rect.image = undefined;

                      _this2.spritesMap[rect.url] = rect;
                      rect.url = undefined;
                    }
                  });
                });case 6:case "end":return _context.stop();}}}, _callee, this);}));function finish() {return _finish.apply(this, arguments);}return finish;}() }, { key: "spriteUV", value: function spriteUV(


    url) {
      var item = this.spritesMap[url];
      if (item) {
        return {
          x: item.x / this.canvasWidth,
          y: item.y / this.canvasHeight,
          w: (item.x + item.width) / this.canvasWidth,
          h: (item.y + item.height) / this.canvasHeight };

      } else {
        return {
          x: 0,
          y: 0,
          w: 1,
          h: 1 };

      }
    } }, { key: "canvasWidth", get: function get() {return this.canvas.width;} }, { key: "canvasHeight", get: function get() {return this.canvas.height;} }]);return SpriteAtlas;}();




/***/ }),

/***/ "./extensions/DataVisualization/SpriteMeshBuilder.js":
/*!***********************************************************!*\
  !*** ./extensions/DataVisualization/SpriteMeshBuilder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} // 64K

var THREE = __webpack_require__(/*! three */ "three");

var MAX_VCOUNT = 65535;var

SpriteMeshBuilder = /*#__PURE__*/function () {"use strict";

  function SpriteMeshBuilder(meshCallback) {_classCallCheck(this, SpriteMeshBuilder);
    this.meshCallback = meshCallback;
    this.dbIds = [];
    this.reset();
  }_createClass(SpriteMeshBuilder, [{ key: "addPoint", value: function addPoint(

    viewable, spriteAtlas) {
      if (this.vcount + 1 > MAX_VCOUNT) {
        this.flushBuffer();

        this.reset();
      }

      var index = this.vcount;
      this.ib[index] = index;

      this.vb[index * 3] = viewable.position.x;
      this.vb[index * 3 + 1] = viewable.position.y;
      this.vb[index * 3 + 2] = viewable.position.z;

      this.idb[index * 3] = viewable.dbId & 0xFF;
      this.idb[index * 3 + 1] = viewable.dbId >> 8 & 0xFF;
      this.idb[index * 3 + 2] = viewable.dbId >> 16 & 0xFF;

      this.colorb[index * 3] = viewable.color.r * 255;
      this.colorb[index * 3 + 1] = viewable.color.g * 255;
      this.colorb[index * 3 + 2] = viewable.color.b * 255;

      if (spriteAtlas) {
        var uv = spriteAtlas.spriteUV(viewable.style.url);
        if (uv) {
          this.uv[index * 4] = uv.x;
          this.uv[index * 4 + 1] = uv.y;
          this.uv[index * 4 + 2] = uv.w;
          this.uv[index * 4 + 3] = uv.h;
        }
      }

      this.flags[index] = 0;
      this.dbIds.push(viewable.dbId);
      this.vcount++;
    } }, { key: "reset", value: function reset()

    {
      this.vcount = 0;

      this.ib = new Uint16Array(MAX_VCOUNT);
      this.idb = new Uint8Array(MAX_VCOUNT * 3);
      this.vb = new Float32Array(MAX_VCOUNT * 3);
      this.colorb = new Uint8Array(MAX_VCOUNT * 3);
      this.flags = new Uint8Array(MAX_VCOUNT);
      this.uv = new Float32Array(MAX_VCOUNT * 4);
    } }, { key: "flushBuffer", value: function flushBuffer()

    {
      var geometry = new THREE.BufferGeometry();
      var idAttribute = new THREE.BufferAttribute(new Uint8Array(this.idb.slice(0, this.vcount * 3)), 3);
      idAttribute.bytesPerItem = 1;
      idAttribute.normalize = true;

      var positionAttribute = new THREE.BufferAttribute(new Float32Array(this.vb.slice(0, this.vcount * 3)), 3);
      positionAttribute.bytesPerItem = 4;

      var colorAttribute = new THREE.BufferAttribute(new Uint8Array(this.colorb.slice(0, this.vcount * 3)), 3);
      colorAttribute.bytesPerItem = 1;
      colorAttribute.normalize = true;

      var indexAttribute = new THREE.BufferAttribute(new Uint16Array(this.ib.slice(0, this.vcount)), 1);

      var uvAttribute = new THREE.BufferAttribute(new Float32Array(this.uv.slice(0, this.vcount * 4)), 4);

      var flagAttribute = new THREE.BufferAttribute(new Float32Array(this.flags.slice(0, this.vcount)), 1);

      geometry.addAttribute("id", idAttribute);
      geometry.addAttribute("index", indexAttribute);
      geometry.addAttribute("position", positionAttribute);
      geometry.addAttribute("color", colorAttribute);
      geometry.addAttribute("uvp", uvAttribute);
      geometry.addAttribute("flagp", flagAttribute);

      geometry.isPoints = true;
      geometry.dbIds = this.dbIds.slice(0);
      this.dbIds.length = 0;

      if (this.meshCallback) {
        this.meshCallback(geometry);
      }
      this.vcount = 0;
    } }]);return SpriteMeshBuilder;}();


module.exports = {
  SpriteMeshBuilder: SpriteMeshBuilder };

/***/ }),

/***/ "./extensions/DataVisualization/TextureUtils.js":
/*!******************************************************!*\
  !*** ./extensions/DataVisualization/TextureUtils.js ***!
  \******************************************************/
/*! exports provided: TextureUtility */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureUtility", function() { return TextureUtility; });
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var TextureUtility = /*#__PURE__*/function () {

  function TextureUtility(viewer) {_classCallCheck(this, TextureUtility);
    this.viewer = viewer;
    this._textures = {};
    this._colors = {};
    this._excluded = [
    '__defaultMaterial__',
    '__fadeMaterial__',
    '__highlightMaterial__'];

  }_createClass(TextureUtility, [{ key: "show", value: function show()

    {
      // this.viewer.setLightPreset(this._dataModel.dasherSettings.noTexturesLighting);
      this.hideTextures();
      this.regen();
      return true;
    } }, { key: "hide", value: function hide()

    {
      // this.viewer.setLightPreset(this._dataModel.dasherSettings.initialLighting);
      this.showTextures();
      this.regen();
      return true;
    } }, { key: "regen", value: function regen()

    {
      this.viewer.refresh(true);
      // this.viewer.impl.invalidate(true, true, false);
    } }, { key: "hideTextures", value: function hideTextures()

    {
      var store = Object.keys(this._textures).length === 0;
      var white = new THREE.Color(1, 1, 1);

      var mats = this.viewer.impl.matman()._materials;
      for (var p in mats) {
        if (this._excluded.indexOf(p) === -1) {
          var m = mats[p];
          if (store) {
            this._textures[p] = m.map;
            this._colors[p] = m.color;
          }
          m.map = null;
          m.color = white;
          m.needsUpdate = true;
        }
      }
      this.regen();
    } }, { key: "showTextures", value: function showTextures()

    {
      if (Object.keys(this._textures).length > 0) {
        var mats = this.viewer.impl.matman()._materials;
        for (var p in mats) {
          if (this._excluded.indexOf(p) === -1) {
            var m = mats[p];
            var mat = this._textures[p];
            if (mat) {
              m.map = mat;
            }
            var col = this._colors[p];
            if (col) {
              m.color = col;
            }
            m.needsUpdate = true;
          }
        }
      }
      this.regen();
    } }]);return TextureUtility;}();

/***/ }),

/***/ "./extensions/DataVisualization/external/maxrects-packer.js":
/*!******************************************************************!*\
  !*** ./extensions/DataVisualization/external/maxrects-packer.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _createForOfIteratorHelper(o, allowArrayLike) {var it;if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = o[Symbol.iterator]();}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}Object.defineProperty(exports, "__esModule", { value: !0 });var Rectangle = /*#__PURE__*/function () {function Rectangle() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;var h = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;var e = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;var n = arguments.length > 5 ? arguments[5] : undefined;_classCallCheck(this, Rectangle);this.oversized = !1, this._rot = !1, this._allowRotation = void 0, this._dirty = 0, this._width = t, this._height = i, this._x = h, this._y = e, this._data = {}, this._rot = s, this._allowRotation = n;}_createClass(Rectangle, [{ key: "area", value: function area() {return this.width * this.height;} }, { key: "collide", value: function collide(t) {return t.x < this.x + this.width && t.x + t.width > this.x && t.y < this.y + this.height && t.y + t.height > this.y;} }, { key: "contain", value: function contain(t) {return t.x >= this.x && t.y >= this.y && t.x + t.width <= this.x + this.width && t.y + t.height <= this.y + this.height;} }, { key: "setDirty", value: function setDirty() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;this._dirty = t ? this._dirty + 1 : 0;} }, { key: "width", get: function get() {return this._width;}, set: function set(t) {t !== this._width && (this._width = t, this._dirty++);} }, { key: "height", get: function get() {return this._height;}, set: function set(t) {t !== this._height && (this._height = t, this._dirty++);} }, { key: "x", get: function get() {return this._x;}, set: function set(t) {t !== this._x && (this._x = t, this._dirty++);} }, { key: "y", get: function get() {return this._y;}, set: function set(t) {t !== this._y && (this._y = t, this._dirty++);} }, { key: "rot", get: function get() {return this._rot;}, set: function set(t) {if (!1 !== this._allowRotation && this._rot !== t) {var i = this.width;this.width = this.height, this.height = i, this._rot = t, this._dirty++;}} }, { key: "allowRotation", get: function get() {return this._allowRotation;}, set: function set(t) {this._allowRotation !== t && (this._allowRotation = t, this._dirty++);} }, { key: "data", get: function get() {return this._data;}, set: function set(t) {null !== t && t !== this._data && (this._data = t, "object" == _typeof(t) && t.hasOwnProperty("allowRotation") && (this._allowRotation = t.allowRotation), this._dirty++);} }, { key: "dirty", get: function get() {return this._dirty > 0;} }], [{ key: "Collide", value: function Collide(t, i) {return t.collide(i);} }, { key: "Contain", value: function Contain(t, i) {return t.contain(i);} }]);return Rectangle;}();var Bin = /*#__PURE__*/function () {function Bin() {_classCallCheck(this, Bin);this._dirty = 0;}_createClass(Bin, [{ key: "setDirty", value: function setDirty() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;if (this._dirty = t ? this._dirty + 1 : 0, !t) {var _iterator = _createForOfIteratorHelper(this.rects),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _t = _step.value;_t.setDirty && _t.setDirty(!1);}} catch (err) {_iterator.e(err);} finally {_iterator.f();}}} }, { key: "dirty", get: function get() {return this._dirty > 0 || this.rects.some(function (t) {return t.dirty;});} }]);return Bin;}();var MaxRectsBin = /*#__PURE__*/function (_Bin) {_inherits(MaxRectsBin, _Bin);var _super = _createSuper(MaxRectsBin);function MaxRectsBin() {var _this;var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EDGE_MAX_VALUE;var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EDGE_MAX_VALUE;var h = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;var e = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { smart: !0, pot: !0, square: !0, allowRotation: !1, tag: !1, border: 0, logic: exports.PACKING_LOGIC.MAX_EDGE };_classCallCheck(this, MaxRectsBin);_this = _super.call(this), _this.maxWidth = t, _this.maxHeight = i, _this.padding = h, _this.options = e, _this.freeRects = [], _this.rects = [], _this.verticalExpand = !1, _this.width = _this.options.smart ? 0 : t, _this.height = _this.options.smart ? 0 : i, _this.border = _this.options.border ? _this.options.border : 0, _this.freeRects.push(new Rectangle(_this.maxWidth + _this.padding - 2 * _this.border, _this.maxHeight + _this.padding - 2 * _this.border, _this.border, _this.border)), _this.stage = new Rectangle(_this.width, _this.height);return _this;}_createClass(MaxRectsBin, [{ key: "add", value: function add() {var i, h;if (1 === arguments.length) {if ("object" != _typeof(arguments.length <= 0 ? undefined : arguments[0])) throw new Error("MacrectsBin.add(): Wrong parameters");var _i = (h = arguments.length <= 0 ? undefined : arguments[0]).data && h.data.tag ? h.data.tag : h.tag ? h.tag : void 0;if (this.options.tag && this.tag !== _i) return;} else {if (i = arguments.length > 2 ? arguments.length <= 2 ? undefined : arguments[2] : null, this.options.tag) {if (i && this.tag !== i.tag) return;if (!i && this.tag) return;}(h = new Rectangle(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1])).data = i, h.setDirty(!1);}var e = this.place(h);return e && this.rects.push(e), e;} }, { key: "repack", value: function repack() {var t = [];this.reset(), this.rects.sort(function (t, i) {var h = Math.max(i.width, i.height) - Math.max(t.width, t.height);return 0 === h && t.hash && i.hash ? t.hash > i.hash ? -1 : 1 : h;});var _iterator2 = _createForOfIteratorHelper(this.rects),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _i3 = _step2.value;this.place(_i3) || t.push(_i3);}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}for (var _i2 = 0, _t2 = t; _i2 < _t2.length; _i2++) {var i = _t2[_i2];this.rects.splice(this.rects.indexOf(i), 1);}return t.length > 0 ? t : void 0;} }, { key: "reset", value: function reset() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;t && (this.data && delete this.data, this.tag && delete this.tag, this.rects = [], i && (this.options = { smart: !0, pot: !0, square: !0, allowRotation: !1, tag: !1, border: 0 })), this.width = this.options.smart ? 0 : this.maxWidth, this.height = this.options.smart ? 0 : this.maxHeight, this.border = this.options.border ? this.options.border : 0, this.freeRects = [new Rectangle(this.maxWidth + this.padding - 2 * this.border, this.maxHeight + this.padding - 2 * this.border, this.border, this.border)], this.stage = new Rectangle(this.width, this.height), this._dirty = 0;} }, { key: "place", value: function place(t) {var i = t.data && t.data.tag ? t.data.tag : t.tag ? t.tag : void 0;if (!this.options.tag || this.tag === i) {var _i4, h;if (h = t.hasOwnProperty("_allowRotation") && void 0 !== t.allowRotation ? t.allowRotation : this.options.allowRotation, _i4 = this.findNode(t.width + this.padding, t.height + this.padding, h)) {this.updateBinSize(_i4);var _h = this.freeRects.length,e = 0;for (; e < _h;) {this.splitNode(this.freeRects[e], _i4) && (this.freeRects.splice(e, 1), _h--, e--), e++;}return this.pruneFreeList(), this.verticalExpand = this.width > this.height, t.x = _i4.x, t.y = _i4.y, void 0 === t.rot && (t.rot = !1), t.rot = _i4.rot ? !t.rot : t.rot, this._dirty++, t;}if (this.verticalExpand) {if (this.updateBinSize(new Rectangle(t.width + this.padding, t.height + this.padding, this.border, this.height + this.padding - this.border)) || this.updateBinSize(new Rectangle(t.width + this.padding, t.height + this.padding, this.width + this.padding - this.border, this.border))) return this.place(t);} else if (this.updateBinSize(new Rectangle(t.width + this.padding, t.height + this.padding, this.width + this.padding - this.border, this.border)) || this.updateBinSize(new Rectangle(t.width + this.padding, t.height + this.padding, this.border, this.height + this.padding - this.border))) return this.place(t);}} }, { key: "findNode", value: function findNode(t, i, h) {var e,s,n,r = Number.MAX_VALUE;for (var o in this.freeRects) {(s = this.freeRects[o]).width >= t && s.height >= i && (e = this.options.logic === exports.PACKING_LOGIC.MAX_AREA ? s.width * s.height - t * i : Math.min(s.width - t, s.height - i)) < r && (n = new Rectangle(t, i, s.x, s.y), r = e), h && s.width >= i && s.height >= t && (e = this.options.logic === exports.PACKING_LOGIC.MAX_AREA ? s.width * s.height - i * t : Math.min(s.height - t, s.width - i)) < r && (n = new Rectangle(i, t, s.x, s.y, !0), r = e);}return n;} }, { key: "splitNode", value: function splitNode(t, i) {if (!t.collide(i)) return !1;if (i.x < t.x + t.width && i.x + i.width > t.x) {if (i.y > t.y && i.y < t.y + t.height) {var h = new Rectangle(t.width, i.y - t.y, t.x, t.y);this.freeRects.push(h);}if (i.y + i.height < t.y + t.height) {var _h2 = new Rectangle(t.width, t.y + t.height - (i.y + i.height), t.x, i.y + i.height);this.freeRects.push(_h2);}}if (i.y < t.y + t.height && i.y + i.height > t.y) {if (i.x > t.x && i.x < t.x + t.width) {var _h3 = new Rectangle(i.x - t.x, t.height, t.x, t.y);this.freeRects.push(_h3);}if (i.x + i.width < t.x + t.width) {var _h4 = new Rectangle(t.x + t.width - (i.x + i.width), t.height, i.x + i.width, t.y);this.freeRects.push(_h4);}}return !0;} }, { key: "pruneFreeList", value: function pruneFreeList() {var t = 0,i = 0,h = this.freeRects.length;for (; t < h;) {i = t + 1;var e = this.freeRects[t];for (; i < h;) {var s = this.freeRects[i];if (s.contain(e)) {this.freeRects.splice(t, 1), t--, h--;break;}e.contain(s) && (this.freeRects.splice(i, 1), i--, h--), i++;}t++;}} }, { key: "updateBinSize", value: function updateBinSize(t) {if (!this.options.smart) return !1;if (this.stage.contain(t)) return !1;var i = Math.max(this.width, t.x + t.width - this.padding + this.border),h = Math.max(this.height, t.y + t.height - this.padding + this.border);if (this.options.allowRotation) {var e = Math.max(this.width, t.x + t.height - this.padding + this.border),s = Math.max(this.height, t.y + t.width - this.padding + this.border);e * s < i * h && (i = e, h = s);}return this.options.pot && (i = Math.pow(2, Math.ceil(Math.log(i) * Math.LOG2E)), h = Math.pow(2, Math.ceil(Math.log(h) * Math.LOG2E))), this.options.square && (i = h = Math.max(i, h)), !(i > this.maxWidth + this.padding || h > this.maxHeight + this.padding) && (this.expandFreeRects(i + this.padding, h + this.padding), this.width = this.stage.width = i, this.height = this.stage.height = h, !0);} }, { key: "expandFreeRects", value: function expandFreeRects(t, i) {var _this2 = this;this.freeRects.forEach(function (h, e) {h.x + h.width >= Math.min(_this2.width + _this2.padding - _this2.border, t) && (h.width = t - h.x - _this2.border);h.y + h.height >= Math.min(_this2.height + _this2.padding - _this2.border, i) && (h.height = i - h.y - _this2.border);}, this), this.freeRects.push(new Rectangle(t - this.width - this.padding, i - 2 * this.border, this.width + this.padding - this.border, this.border)), this.freeRects.push(new Rectangle(t - 2 * this.border, i - this.height - this.padding, this.border, this.height + this.padding - this.border)), this.freeRects = this.freeRects.filter(function (t) {return !(t.width <= 0 || t.height <= 0 || t.x < _this2.border || t.y < _this2.border);}), this.pruneFreeList();} }]);return MaxRectsBin;}(Bin);var OversizedElementBin = /*#__PURE__*/function (_Bin2) {_inherits(OversizedElementBin, _Bin2);var _super2 = _createSuper(OversizedElementBin);function OversizedElementBin() {var _this3;_classCallCheck(this, OversizedElementBin);if (_this3 = _super2.call(this), _this3.rects = [], 1 === arguments.length) {if ("object" != _typeof(arguments.length <= 0 ? undefined : arguments[0])) throw new Error("OversizedElementBin: Wrong parameters");var i = arguments.length <= 0 ? undefined : arguments[0];_this3.rects = [i], _this3.width = i.width, _this3.height = i.height, _this3.data = i.data, i.oversized = !0;} else {_this3.width = arguments.length <= 0 ? undefined : arguments[0], _this3.height = arguments.length <= 1 ? undefined : arguments[1], _this3.data = arguments.length > 2 ? arguments.length <= 2 ? undefined : arguments[2] : null;var _i5 = new Rectangle(_this3.width, _this3.height);_i5.oversized = !0, _i5.data = _this3.data, _this3.rects.push(_i5);}_this3.freeRects = [], _this3.maxWidth = _this3.width, _this3.maxHeight = _this3.height, _this3.options = { smart: !1, pot: !1, square: !1 };return _possibleConstructorReturn(_this3);}_createClass(OversizedElementBin, [{ key: "add", value: function add() {} }, { key: "reset", value: function reset() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;} }, { key: "repack", value: function repack() {} }]);return OversizedElementBin;}(Bin);var EDGE_MAX_VALUE = 4096;!function (t) {t[t.MAX_AREA = 0] = "MAX_AREA", t[t.MAX_EDGE = 1] = "MAX_EDGE";}(exports.PACKING_LOGIC || (exports.PACKING_LOGIC = {}));var MaxRectsPacker = /*#__PURE__*/function () {function MaxRectsPacker() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EDGE_MAX_VALUE;var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EDGE_MAX_VALUE;var h = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;var e = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { smart: !0, pot: !0, square: !1, allowRotation: !1, tag: !1, border: 0, logic: exports.PACKING_LOGIC.MAX_EDGE };_classCallCheck(this, MaxRectsPacker);this.width = t, this.height = i, this.padding = h, this.options = e, this._currentBinIndex = 0, this.bins = [];}_createClass(MaxRectsPacker, [{ key: "add", value: function add() {if (1 === arguments.length) {if ("object" != _typeof(arguments.length <= 0 ? undefined : arguments[0])) throw new Error("MacrectsPacker.add(): Wrong parameters");var i = arguments.length <= 0 ? undefined : arguments[0];if (i.width > this.width || i.height > this.height) this.bins.push(new OversizedElementBin(i));else {var t = this.bins.slice(this._currentBinIndex).find(function (t) {return void 0 !== t.add(i);});if (!t) {var _t3 = new MaxRectsBin(this.width, this.height, this.padding, this.options),h = i.data && i.data.tag ? i.data.tag : i.tag ? i.tag : void 0;this.options.tag && h && (_t3.tag = h), _t3.add(i), this.bins.push(_t3);}}return i;}{var _i6 = new Rectangle(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);if (arguments.length > 2 && (_i6.data = arguments.length <= 2 ? undefined : arguments[2]), _i6.width > this.width || _i6.height > this.height) this.bins.push(new OversizedElementBin(_i6));else {var _t4 = this.bins.slice(this._currentBinIndex).find(function (t) {return void 0 !== t.add(_i6);});if (!_t4) {var _t5 = new MaxRectsBin(this.width, this.height, this.padding, this.options);this.options.tag && _i6.data.tag && (_t5.tag = _i6.data.tag), _t5.add(_i6), this.bins.push(_t5);}}return _i6;}} }, { key: "addArray", value: function addArray(t) {var _this4 = this;this.sort(t, this.options.logic).forEach(function (t) {return _this4.add(t);});} }, { key: "reset", value: function reset() {this.bins = [], this._currentBinIndex = 0;} }, { key: "repack", value: function repack() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;if (t) {var _t6 = [];var _iterator3 = _createForOfIteratorHelper(this.bins),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var i = _step3.value;if (i.dirty) {var h = i.repack();h && _t6.push.apply(_t6, _toConsumableArray(h));}}} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}return void this.addArray(_t6);}if (this.dirty) {var _t7 = this.rects;this.reset(), this.addArray(_t7);}} }, { key: "next", value: function next() {return this._currentBinIndex = this.bins.length, this._currentBinIndex;} }, { key: "load", value: function load(t) {var _this5 = this;t.forEach(function (t, i) {if (t.maxWidth > _this5.width || t.maxHeight > _this5.height) _this5.bins.push(new OversizedElementBin(t.width, t.height, {}));else {var h = new MaxRectsBin(_this5.width, _this5.height, _this5.padding, t.options);h.freeRects.splice(0), t.freeRects.forEach(function (t, i) {h.freeRects.push(new Rectangle(t.width, t.height, t.x, t.y));}), h.width = t.width, h.height = t.height, t.tag && (h.tag = t.tag), _this5.bins[i] = h;}}, this);} }, { key: "save", value: function save() {var t = [];return this.bins.forEach(function (i) {var h = { width: i.width, height: i.height, maxWidth: i.maxWidth, maxHeight: i.maxHeight, freeRects: [], rects: [], options: i.options };i.tag && (h = Object.assign(Object.assign({}, h), { tag: i.tag }));i.freeRects.forEach(function (t) {h.freeRects.push({ x: t.x, y: t.y, width: t.width, height: t.height });});t.push(h);}), t;} }, { key: "sort", value: function sort(t) {var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.PACKING_LOGIC.MAX_EDGE;return t.slice().sort(function (t, h) {var e = i === exports.PACKING_LOGIC.MAX_EDGE ? Math.max(h.width, h.height) - Math.max(t.width, t.height) : h.width * h.height - t.width * t.height;return 0 === e && t.hash && h.hash ? t.hash > h.hash ? -1 : 1 : e;});} }, { key: "currentBinIndex", get: function get() {return this._currentBinIndex;} }, { key: "dirty", get: function get() {return this.bins.some(function (t) {return t.dirty;});} }, { key: "rects", get: function get() {var t = [];var _iterator4 = _createForOfIteratorHelper(this.bins),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var i = _step4.value;t.push.apply(t, _toConsumableArray(i.rects));}} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}return t;} }]);return MaxRectsPacker;}();exports.Bin = Bin, exports.MaxRectsBin = MaxRectsBin, exports.MaxRectsPacker = MaxRectsPacker, exports.OversizedElementBin = OversizedElementBin, exports.Rectangle = Rectangle;

/***/ }),

/***/ "./extensions/DataVisualization/heatmap/HeatmapMaterial.js":
/*!*****************************************************************!*\
  !*** ./extensions/DataVisualization/heatmap/HeatmapMaterial.js ***!
  \*****************************************************************/
/*! exports provided: HeatmapMaterial, createColorStops */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeatmapMaterial", function() { return HeatmapMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createColorStops", function() { return createColorStops; });
function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);} /**
material for heatmap rendering.

param {Array.<THREE.Vector4>} sensorVals The value of sensors where
x, y, z components carry the position of a sensor, and w component 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * represents the normalized value of a sensor in the range of 0.0 to 1.0.
f the w component is a negative number, the sensor will not have any 
influence towards the color of the material.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @param {Array.<THREE.Vector3>} colors An array of Vector3 each representing a 
color value of a stop in the grandient. The length of this array must be the 
same as stops parameter.
param {Array.<number>} stops An array of normalized numbers each representing
a stop in the gradient. The numbers in this array must be in ascending order,
and the array length must be the same as colors parameter.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @param {boolean} useRooms 
param {number} confidence 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */var
HeatmapMaterial = /*#__PURE__*/function (_THREE$ShaderMaterial) {_inherits(HeatmapMaterial, _THREE$ShaderMaterial);var _super = _createSuper(HeatmapMaterial);
  function HeatmapMaterial(sensorVals, colors, stops, useRooms, confidence) {_classCallCheck(this, HeatmapMaterial);
    var uniforms = {
      sensors: { type: 'v4v', value: [] },
      uStops: { type: 'fv1', value: stops },
      uColors: { type: 'v3v', value: colors } };


    sensorVals.forEach(function (v) {
      uniforms.sensors.value.push(v);
    });

    var sensorCount = sensorVals.length;
    var stopsCount = stops.length;

    var vertexShader = "\n              varying vec4 worldCoord;\n              void main()\n              {\n                vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n                worldCoord = modelMatrix * vec4( position, 1.0 );\n                gl_Position = projectionMatrix * mvPosition;\n              }\n            ";









    var colormap = "\n            float lmap(float value, float inMin, float inMax, float outMin, float outMax)\n            {\n              return clamp(outMin + ((outMax - outMin) * (value - inMin)) / (inMax - inMin), outMin, outMax);\n            }\n\n            // Gradient with multiple colors in non-equal intervals\n            vec3 colormap(float x)\n            {\n              for (int i = 1; i < ".concat(









    stopsCount, "; i++) {\n                if (x <= uStops[i]) {\n                  float stopPct = lmap(x, uStops[i-1], uStops[i], 0.0, 1.0);\n                  return mix(uColors[i-1], uColors[i], stopPct);\n                }\n              }\n\n              // In case 'x' goes beyond upper bound.\n              return uColors[").concat(







    stopsCount, " - 1];\n            }\n           ");



    var fragmentShader = "\n          varying vec4 worldCoord;\n          const int sensorCount = ".concat(


    sensorCount, ";\n          uniform vec4 sensors [sensorCount];\n          uniform vec3 uColors[5];   // 5 is the max number of gradient colors\n          uniform float uStops[5];\n          const float dotSize = 6.0;\n          const float h_var1 = 0.4;\n          const float h_var2 = 0.25;\n          const float two_pi = 2.0 * 3.1415927;\n          ").concat(







    colormap, "\n          vec2 get_pix(float angle){\n            float rad = radians(angle);\n            float c = cos(rad);\n            float s = sin(rad);\n            mat2 R = mat2(vec2(c, -s), vec2(s, c));\n            return R * gl_FragCoord.xy;\n          }\n\n          vec3 halftone(float tone, vec3 dotColor, vec3 backgroundColor){\n            vec2 u = get_pix(-45.0) / (dotSize);\n            float h = (h_var1 + h_var2 * cos(u.x*two_pi));\n            const float e = 0.05;\n            float gradient = smoothstep(-e, e, h - tone);\n            return mix(dotColor, backgroundColor, gradient);\n          }\n\n          void main( void ) {\n            vec3 fragPos = vec3(worldCoord.x, worldCoord.y, worldCoord.z);\n            const float maxConfidence = float(").concat(


















    confidence, "); // in World Coordinates\n            float result = 0.0;\n            float sum = 0.0;\n            float wsum = 0.000001;\n            float minDist = ").concat(



    useRooms ? '99999' : '999999999', ".0;\n            bool found = false; // at exact location of the sensor\n            int validSensors = 0;\n            if (sensorCount > 1) {\n              for (int i=0; i < sensorCount; i++) {\n                float mydist = distance(fragPos, vec3(sensors[i][0], sensors[i][1], sensors[i][2]));\n                if (sensors[i][3] >= 0.0) {\n                  if (mydist < 0.00001) {\n                    result = sensors[i][3];\n                    found = true;\n                  } else {\n                    float w = (1.0 / (mydist * mydist").concat(










    useRooms ? ' * mydist' : '', "));\n                    sum += (sensors[i][3] * w);\n                    wsum += w;\n                  }\n                  validSensors += 1;\n                  if (mydist < minDist) {\n                    minDist = mydist;\n                  }\n                }\n              }\n              if (validSensors == 0) {\n                result = -1.0;\n              } else if (!found) {\n                result = sum / wsum;\n              }\n            } else {\n              float mydist = distance(fragPos, vec3(sensors[0][0], sensors[0][1], sensors[0][2]));\n              result = sensors[0][3];\n              if(mydist < minDist){\n                minDist = mydist;\n              }\n            }\n\n            // Defaults without influence from any sensor\n            float confidence = 0.0;\n            vec3 sensorColor = vec3(0.5, 0.5, 0.5);\n\n            if (result >= 0.0) {\n              result = clamp(result, 0.0, 1.0);\n              confidence = 1.0 - clamp(minDist / maxConfidence, 0.0, 1.0);\n              sensorColor = colormap(result);\n            }\n\n            vec3 confidenceColor = halftone(clamp(confidence, 0.3, 0.9), vec3(0.7, 0.7, 0.7), vec3(1.0, 1.0, 1.0));\n            gl_FragColor = vec4(mix(confidenceColor, sensorColor, clamp(confidence, 0.0, 1.0)), 0.7);\n          }\n        ");return _super.call(this,





































    {
      uniforms: uniforms,
      vertexShader: vertexShader,
      fragmentShader: fragmentShader,
      side: THREE.DoubleSide });

  }return HeatmapMaterial;}(THREE.ShaderMaterial);



function createColorStops(n) {
  var res = [];
  var inc = 1 / (n - 1);
  for (var i = 0; i < n; i++) {
    res.push(inc * i);
  }
  return res;
}



/***/ }),

/***/ "./extensions/DataVisualization/heatmap/SurfaceShading.js":
/*!****************************************************************!*\
  !*** ./extensions/DataVisualization/heatmap/SurfaceShading.js ***!
  \****************************************************************/
/*! exports provided: SurfaceShading */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurfaceShading", function() { return SurfaceShading; });
/* harmony import */ var _HeatmapMaterial__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HeatmapMaterial */ "./extensions/DataVisualization/heatmap/HeatmapMaterial.js");
/* harmony import */ var _ModelStructureInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ModelStructureInfo */ "./extensions/DataVisualization/ModelStructureInfo.js");
/* harmony import */ var _SurfaceShadingData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SurfaceShadingData */ "./extensions/DataVisualization/heatmap/SurfaceShadingData.js");
/* harmony import */ var _SurfaceShadingData__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_2__);
function _createForOfIteratorHelper(o, allowArrayLike) {var it;if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = o[Symbol.iterator]();}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}



/**
                                                                                * @callback SensorValuePicker
                                                                                * Callback function to retrieve the normalized value of a sensor given its
                                                                                * identifier and type.
                                                                                *
                                                                                * @param {Device} device The client supplied device passed in through a prior
                                                                                * call to 'ModelStructureInfo.mapDevicesInRoom' method.
                                                                                * @param {string} sensorType An opaque sensor type value specified by client.
                                                                                * @returns {number} A normalized sensor value [0.0, 1.0]
                                                                                */

var surfaceShadingOverlay = "SurfaceShading";
var LARGE_FLOAT = 9999999.9;
var avp = Autodesk.Viewing.Private;var

SurfaceShading = /*#__PURE__*/function () {
  /**
                                            * Constructs an instance of SurfaceShading object based on the given model
                                            * and shading data.
                                            *
                                            * @param {GUIViewer3D} viewer The viewer in which SurfaceShading is created.
                                            * @param {Model} model The model based on which SurfaceShading is created.
                                            * @param {SurfaceShadingData} shadingData The data for SurfaceShading.
                                            */
  function SurfaceShading(viewer, model, shadingData) {_classCallCheck(this, SurfaceShading);
    this.viewer = viewer;
    this.model = model;
    this.shadingData = shadingData;

    this.sensorValueIndex = [];
    this.settings = {};

    // TODO: These are to be defined by client code based on device/property combinations.
    this.registerSensorColors("hatchPattern", [0xffffff, 0xffffff]);
    this.registerSensorColors("__defaultSensor__", [0x0000ff, 0x00ff00, 0xffff00, 0xff0000]);
  }

  /**
     * Removes any surface shading created by clearing the overlay which holds
     * the meshes used as heatmap representation. Note that this call does not
     * release other resources like materials created.
     */_createClass(SurfaceShading, [{ key: "removeShading", value: function removeShading()
    {
      this.viewer.impl.removeOverlayScene(surfaceShadingOverlay);
      this.viewer.impl.invalidate(false, false, true);
    }

    /**
       * Cleans up overlay used for the surface shading, as well as the materials
       * created to render surface shading.
       */ }, { key: "cleanUp", value: function cleanUp()
    {
      this.removeShading();

      for (var i = 0; i < this.sensorValueIndex.length; i++) {var
        heatmapMaterial = this.sensorValueIndex[i].heatmapMaterial;
        heatmapMaterial.dispose();
      }

      this.sensorValueIndex = [];

      if (this.hatchMaterial) {
        this.hatchMaterial.dispose();
        delete this.hatchMaterial;
      }
    } }, { key: "_createHatchMaterial", value: function _createHatchMaterial()

    {
      var setting = this.settings["hatchPattern"];
      var material = new _HeatmapMaterial__WEBPACK_IMPORTED_MODULE_0__["HeatmapMaterial"](
      [new THREE.Vector4(LARGE_FLOAT, LARGE_FLOAT, LARGE_FLOAT, -1)],
      setting.colors,
      setting.stops,
      true,
      60);


      return material;
    }

    /**
       *
       * @param {string} sensorType
       * @param {number[]} colors
       */ }, { key: "registerSensorColors", value: function registerSensorColors(
    sensorType, colors) {
      this.settings[sensorType] = {
        stops: Object(_HeatmapMaterial__WEBPACK_IMPORTED_MODULE_0__["createColorStops"])(colors.length),
        colors: colors.
        map(function (c) {return new THREE.Color(c);}).
        map(function (color) {return new THREE.Vector3(color.r, color.g, color.b);}) };

    } }, { key: "getSetting", value: function getSetting(

    sensorType) {
      if (this.settings[sensorType]) {
        return this.settings[sensorType];
      } else {
        return this.settings["__defaultSensor__"];
      }
    }

    /**
       * Renders one or more nodes with the given identifiers. This call creates
       * necessary resources like overlay scene and materials, therefore is by 
       * design to be called only when necessary (i.e., when surface shading needs
       * to be updated due to geometry changes). For more light weight rendering,
       * updateShading API should be used instead.
       * 
       * @param {string|string[]} nodeId One or more identifiers of nodes
       * to render. These identifiers are among the ones provided through
       * SurfaceShadingData when the SurfaceShading object is constructed.
       * @param {string} sensorType The type of sensor to render the shading for.
       * @param {SensorValueCallback} sensorValuePicker The callback function that
       * will be invoked when SurfaceShading requires the sensor value to render.
       * @param {number} confidenceSize The confidence size.
       */ }, { key: "render", value: function render(
    nodeId, sensorType, sensorValuePicker) {var _this = this;var confidenceSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 160;
      /** @type {SurfaceShadingNode[]} */
      var nodes = [];
      if (nodeId instanceof Array) {
        nodeId.forEach(function (id) {return _this.shadingData.getLeafsById(id, nodes);});
      } else {
        nodes = this.shadingData.getLeafsById(nodeId);
      }

      var it = this.model.getInstanceTree();

      var viewerImp = this.viewer.impl;
      var sensorValueIndex = this.sensorValueIndex;

      viewerImp.createOverlayScene(surfaceShadingOverlay);
      if (!this.hatchMaterial) {
        this.hatchMaterial = this._createHatchMaterial();
      }

      /**
         * Filters out shading points that expose the specified sensor type.
         *
         * @param {SurfaceShadingPoint[]} shadingPoints The shading points to filter from.
         * @param {string} sensorType The type of sensors to filter device with.
         * @returns {SurfaceShadingPoint[]} The shading points that expose the given sensor type.
         */
      function filterShadingPointsByType(shadingPoints, sensorType) {
        shadingPoints = shadingPoints || [];
        return shadingPoints.filter(function (d) {return d.types.includes(sensorType);});
      }

      function addMeshToOverlay(fragId, material) {
        // add geometry into the overlay
        var geometry = it.fragList.getGeometry(fragId);
        if (!geometry) {
          avp.logger.error("Geometry for the fragment is empty, FragId:", fragId);
          return;
        }
        var mesh = new THREE.Mesh(geometry, material);
        var m = new THREE.Matrix4();
        it.fragList.getWorldMatrix(fragId, m);

        mesh.matrix.copy(m);
        mesh.matrixWorldNeedsUpdate = true;
        mesh.matrixAutoUpdate = false;
        mesh.frustumCulled = false;

        viewerImp.addOverlay(surfaceShadingOverlay, mesh);
      }var _loop = function _loop(

      i) {
        var node = nodes[i];
        var shadingPoints = filterShadingPointsByType(node.shadingPoints, sensorType);

        node.fragIds.forEach(function (fragId) {
          if (shadingPoints.length > 0) {
            /** @type {THREE.Vector4[]} */
            var sensorValues = [];

            // render the sufaceMap with current sensor value
            shadingPoints.forEach(function (shadingPoint) {
              var p = shadingPoint.position;
              var value = sensorValuePicker(shadingPoint, sensorType);
              var sensorValue = new THREE.Vector4(p.x, p.y, p.z, value);

              sensorValues.push(sensorValue);
            });

            var setting = _this.getSetting(sensorType);

            // Caculate the confidence value if node.bounds exists
            var confidence = confidenceSize;

            if (node.bounds) {
              var bmax = node.bounds.max;
              var bmin = node.bounds.min;
              confidence = bmax.x - bmin.x + (bmax.y - bmin.y) + (bmax.z - bmin.z);
            }

            var heatmapMaterial = new _HeatmapMaterial__WEBPACK_IMPORTED_MODULE_0__["HeatmapMaterial"](
            sensorValues,
            setting.colors,
            setting.stops,
            true,
            confidence);


            sensorValueIndex.push({
              shadingPoints: shadingPoints,
              sensorType: sensorType,
              heatmapMaterial: heatmapMaterial });


            addMeshToOverlay(fragId, heatmapMaterial);
          } else {
            // does not contain the sensor type, show stripe
            addMeshToOverlay(fragId, _this.hatchMaterial);
          }
        });};for (var i = 0; nodes && i < nodes.length; i++) {_loop(i);
      }
    }

    /**
       * This function is useful when in timeline triggered replay scenario
       *
       * @param {SensorValuePicker} sensorValuePicker Return a sensor value for the time context
       */ }, { key: "updateShading", value: function updateShading(
    sensorValuePicker) {
      for (var i = 0; i < this.sensorValueIndex.length; i++) {var _this$sensorValueInde =
        this.sensorValueIndex[i],shadingPoints = _this$sensorValueInde.shadingPoints,sensorType = _this$sensorValueInde.sensorType,heatmapMaterial = _this$sensorValueInde.heatmapMaterial;
        var sensorValue = [];var _iterator = _createForOfIteratorHelper(
        shadingPoints),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var shadingPoint = _step.value;
            var p = shadingPoint.position;
            var value = sensorValuePicker(shadingPoint, sensorType);
            sensorValue.push(new THREE.Vector4(p.x, p.y, p.z, value));
          }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

        heatmapMaterial.uniforms.sensors.value = sensorValue;
      }

      this.viewer.impl.invalidate(false, false, true);
    } }]);return SurfaceShading;}();




/***/ }),

/***/ "./extensions/DataVisualization/heatmap/SurfaceShadingData.js":
/*!********************************************************************!*\
  !*** ./extensions/DataVisualization/heatmap/SurfaceShadingData.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} /**
eneric Data Structure to enable the Heatmap/SurfaceShading



/**
`SurfaceShadingPoint` object is used to represent a real-world entity that
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * has a physical position within the model. A `SurfaceShadingPoint` contains
one or more properties. Surface shading (i.e. heatmap) mechanism queries
values of these properties in order to determine the color of the point where
this `SurfaceShadingPoint` object is located.

or an example, consider an IoT scenario of a physical sensor device, one that
occupies a physical location and exposes multiple sensor properties (such as
temperature" and "humidity"), each of which has its own numeric values.
n this scenario, a `SurfaceShadingPoint` can be used to represent the physical
sensor device, where properties such as "temperature" and "humidity" are `types`
defined in the `SurfaceShadingPoint` object.

class
memberof Autodesk.Viewing.Extensions.DataVisualization
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingPoint
var
SurfaceShadingPoint = /*#__PURE__*/function () {"use strict";
  /**
                                                               * Constructs an instance of `SurfaceShadingPoint` object.
                                                               *
                                                               * @param {string} id The identifier of this `SurfaceShadingPoint` object.
                                                               * @param {{x:number, y: number, z: number}} position The position of
                                                               * this `SurfaceShadingPoint` object in the world space.
                                                               * @param {string[]} types The types (of sensors, or properties) that are
                                                               * exposed by this `SurfaceShadingPoint` object.
                                                               *
                                                               * @example
                                                               *  const sensorId = "cafeteria-entrace-01";
                                                               *  const position = { x: -159.2780, y: -50.4998, z: -16.9196 };
                                                               *  const types = ["temperature", "humidity"];
                                                               *
                                                               *  const shadingPoint = new Autodesk.DataVisualization.SurfaceShadingPoint(
                                                               *      sensorId, position, types);
                                                               */
  function SurfaceShadingPoint(id, position, types) {_classCallCheck(this, SurfaceShadingPoint);
    this.id = id;
    this.position = position;
    this.types = types;
  }

  /**
     * Derives the position of a `SurfaceShadingPoint` from a given `DbId`.
     * The position is calculated by taking the centroid of the union of all the
     * geometry bounding boxes that this `DbId` corresponds to. This function is
     * useful if a position is not supplied at the construction time.
     *
     * @param {Model} model The model that contains the given `DbId`.
     * @param {number} dbId The `DbId` of the object to derive the center point from.
     *
     * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingPoint#positionFromDBId
     *
     * @example
     *  const sensorId = "cafeteria-entrace-01";
     *  const types = ["temperature", "humidity"];
     *
     *  // Position of the shading point is unknown at construction time
     *  const shadingPoint = new Autodesk.DataVisualization.SurfaceShadingPoint(
     *      sensorId, undefined, types);
     *
     *  shadingPoint.positionFromDBId(model, sensorDbId);
     */_createClass(SurfaceShadingPoint, [{ key: "positionFromDBId", value: function positionFromDBId(
    model, dbId) {
      var it = model.getData().instanceTree;
      var bounds = new THREE.Box3();
      var fragBounds = new THREE.Box3();
      var fragList = model.getFragmentList();

      it.enumNodeFragments(
      dbId,
      function (fragId) {
        // get the center of this fragId
        fragList.getWorldBounds(fragId, fragBounds);
        bounds.union(fragBounds);
      },
      true);


      this.position = bounds.center() || this.position;
    } }]);return SurfaceShadingPoint;}();


/**
                                           * A basic rendering unit that represents one or more `DbId`, each corresponds
                                           * to a geometry.
                                           *
                                           * @class
                                           * @memberof Autodesk.Viewing.Extensions.DataVisualization
                                           * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingNode
                                           */var
SurfaceShadingNode = /*#__PURE__*/function () {"use strict";
  /**
                                                              * Constructs an instance of `SurfaceShadingNode` object that represents a
                                                              * basic rendering unit. A `SurfaceShadingNode` contains one or more `DbId`,
                                                              * each corresponds a geometry.
                                                              *
                                                              * @param {string} id The identifier of this `SurfaceShadingNode` object.
                                                              * @param {(number|number[])} dbIds A `DbId` or an array of `DbIds`, each of
                                                              * which represents a geometry that will be rendered when the `SurfaceShadingNode`
                                                              * is included in calls to `renderSurfaceShading` or `updateSurfaceShading` APIs.
                                                              * @param {SurfaceShadingPoint[]} shadingPoints An optional array
                                                              * of `SurfaceShadingPoint` objects.
                                                              *
                                                              * @example
                                                              *  const id = "engine-cylinder-02";
                                                              *  const dbIds = [1060, 1062, 1064, 1065]; // Objects to be shaded together as one.
                                                              *  const shadingNode = new Autodesk.DataVisualization.SurfaceShadingNode(id, dbIds);
                                                              *
                                                              *  const vibrationSensor02 = new Autodesk.DataVisualization.SurfaceShadingPoint(...);
                                                              *  shadingNode.addPoint(vibrationSensor02); // Associate a sensor to the cylinder.
                                                              *
                                                              *  // User selects to visualize one cylinder from the UI
                                                              *  onEngineCylinderSelected(cylinderName) {
                                                              *      const sensorType = "vibration";
                                                              *      const confidenceSize = 300;
                                                              *
                                                              *      // 'cylinderName' can be "engine-cylinder-02"
                                                              *      dataVizExt.renderSurfaceShading([cylinderName],
                                                              *          sensorType, getSensorValue, confidenceSize);
                                                              *  }
                                                              */
  function SurfaceShadingNode(id, dbIds, shadingPoints) {_classCallCheck(this, SurfaceShadingNode);
    if (typeof dbIds == "number") {
      dbIds = [dbIds];
    }

    this.dbIds = dbIds;
    this.shadingPoints = shadingPoints || [];
    this.isLeaf = true;
    this.fragIds = [];
    this.id = id;
  }

  /**
     * Adds a `SurfaceShadingPoint` object to the `SurfaceShadingNode` object.
     *
     * @param {SurfaceShadingPoint} point The `SurfaceShadingPoint` object to be
     * added to the `SurfaceShadingNode` object.
     *
     * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingNode#addPoint
     */_createClass(SurfaceShadingNode, [{ key: "addPoint", value: function addPoint(
    point) {
      this.shadingPoints.push(point);
    }

    /**
       * @private
       * Updates the `SurfaceShadingNode` object by storing the fragment IDs that
       * are found for each of its dbIds list.
       *
       * @param {Model} model The model from which fragment IDs are to be obtained.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingNode#update
       */ }, { key: "update", value: function update(
    model) {var _this = this;
      var it = model.getData().instanceTree;
      var hashSet = new Set(this.fragIds);

      this.dbIds.forEach(function (dbId) {
        it.enumNodeFragments(dbId, function (fragId) {
          if (!hashSet.has(fragId)) {
            _this.fragIds.push(fragId);
          }
        });
      });
    } }]);return SurfaceShadingNode;}();


/**
                                          * A grouping data structure that allows rendering units to be
                                          * organized in a hierarchical manner. It can contain zero or more
                                          * sub-groups and/or `SurfaceShadingNode` leaf nodes as child.
                                          *
                                          * @class
                                          * @memberof Autodesk.Viewing.Extensions.DataVisualization
                                          * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingGroup
                                          */var
SurfaceShadingGroup = /*#__PURE__*/function () {"use strict";
  /**
                                                               * Constructs an instance of `SurfaceShadingGroup` object.
                                                               *
                                                               * @param {string} id The identifier of the group.
                                                               *
                                                               * @example
                                                               *  const cylinders = [
                                                               *      new Autodesk.DataVisualization.SurfaceShadingNode("engine-cylinder-00", ...),
                                                               *      new Autodesk.DataVisualization.SurfaceShadingNode("engine-cylinder-01", ...),
                                                               *      new Autodesk.DataVisualization.SurfaceShadingNode("engine-cylinder-02", ...),
                                                               *      new Autodesk.DataVisualization.SurfaceShadingNode("engine-cylinder-03", ...),
                                                               *  ];
                                                               *
                                                               *  const groupName = "front-cylinders";
                                                               *  const frontCylinders = new Autodesk.DataVisualization.SurfaceShadingGroup(groupName);
                                                               *  cylinders.forEach(cylinder => frontCylinders.addChild(cylinder));
                                                               *
                                                               *  // User selects to visualize a group of cylinders from the UI
                                                               *  onEngineCylinderGroupSelected(cylinderGroupName) {
                                                               *      const sensorType = "vibration";
                                                               *      const confidenceSize = 300;
                                                               *
                                                               *      // 'cylinderGroupName' can be "front-cylinders"
                                                               *      dataVizExt.renderSurfaceShading([cylinderGroupName],
                                                               *          sensorType, getSensorValue, confidenceSize);
                                                               *  }
                                                               */
  function SurfaceShadingGroup(id) {_classCallCheck(this, SurfaceShadingGroup);
    this.id = id;
    this._children = [];
    this.isGroup = true;
  }

  /**
     * The child nodes, each of which is either another shading group, or a
     * shading leaf node.
     * @returns {SurfaceShadingGroup[]|SurfaceShadingNode[]} The child nodes,
     * each of which is either another shading group, or a shading leaf node.
     */_createClass(SurfaceShadingGroup, [{ key: "addChild",




    /**
                                                              * Adds a child node to the shading group.
                                                              *
                                                              * @param {SurfaceShadingGroup|SurfaceShadingNode} child The
                                                              * child node to be added to the shading group. A child node can
                                                              * either be another `SurfaceShadingGroup`, or `SurfaceShadingNode`.
                                                              *
                                                              * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingGroup#addChild
                                                              */value: function addChild(
    child) {
      this.children.push(child);
    }

    /**
       * @private
       * Recursively updates all the leaf nodes.
       * @param {Model} model The model from which fragment IDs are to be obtained.
       * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingGroup#update
       */ }, { key: "update", value: function update(
    model) {
      this.children.forEach(function (child) {return child.update(model);});
    }

    /**
       * @private
       * For internal use only. Retrieves all the leaf nodes of a shading group,
       * or a particular leaf node with the given identifier.
       *
       * @param {string} id The identifier of the leaf node to retrieve.
       * @param {SurfaceShadingNode[]} results The input/output result list of
       * SurfaceShadingNode that matches the search criteria.
       * @returns {SurfaceShadingNode[]} The resulting list of SurfaceShadingNode
       * that matches the search criteria.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingGroup#getLeafsById
       */ }, { key: "getLeafsById", value: function getLeafsById(
    id, results) {
      results = results || [];

      for (var i = 0; i < this.children.length; i++) {
        var child = this.children[i];
        if (child.id === id) {
          if (child.isLeaf) {
            results.push(child);
          } else if (child.isGroup) {
            child.getChildLeafs(results);
          }
        } else if (child.isGroup) {
          child.getLeafsById(id, results);
        }
      }

      return results;
    }

    /**
       * @private
       * For internal use only. Recursively retrieves all the leaf nodes
       * of this shading group.
       *
       * @param {SurfaceShadingNode[]} results The resulting list of all
       * the leaf nodes. This call always appends leaf nodes into the
       * parameter without first clearing any existing entries in results.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingGroup#getChildLeafs
       */ }, { key: "getChildLeafs", value: function getChildLeafs(
    results) {
      for (var i = 0; i < this.children.length; i++) {
        var child = this.children[i];
        if (child.isLeaf) {
          results.push(child);
        } else if (child.isGroup) {
          this.getChildLeafs(results);
        }
      }
    } }, { key: "children", get: function get() {return this._children;} }]);return SurfaceShadingGroup;}();


/**
                                                                                                              * Data that describes the hierarchical object relationship the surface shading is based on.
                                                                                                              *
                                                                                                              * @class
                                                                                                              * @memberof Autodesk.Viewing.Extensions.DataVisualization
                                                                                                              * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingData
                                                                                                              */var
SurfaceShadingData = /*#__PURE__*/function (_SurfaceShadingGroup) {"use strict";_inherits(SurfaceShadingData, _SurfaceShadingGroup);var _super = _createSuper(SurfaceShadingData);function SurfaceShadingData() {_classCallCheck(this, SurfaceShadingData);return _super.apply(this, arguments);}_createClass(SurfaceShadingData, [{ key: "initialize",
    /**
                                                                                                                                                                                                                                                                                                                                                         * Initialize the `SurfaceShadingData` object so that it can be used as an
                                                                                                                                                                                                                                                                                                                                                         * input to `setupSurfaceShading` API.
                                                                                                                                                                                                                                                                                                                                                         *
                                                                                                                                                                                                                                                                                                                                                         * @param {Model} model The model to initialize the surface shading for.
                                                                                                                                                                                                                                                                                                                                                         *
                                                                                                                                                                                                                                                                                                                                                         * @alias Autodesk.Viewing.Extensions.DataVisualization.SurfaceShadingData#initialize
                                                                                                                                                                                                                                                                                                                                                         *
                                                                                                                                                                                                                                                                                                                                                         * @example
                                                                                                                                                                                                                                                                                                                                                         *  const id = "engine-cylinder-02";
                                                                                                                                                                                                                                                                                                                                                         *  const dbIds = [1060, 1062, 1064, 1065]; // Objects to be shaded together as one.
                                                                                                                                                                                                                                                                                                                                                         *  const shadingNode = new Autodesk.DataVisualization.SurfaceShadingNode(id, dbIds);
                                                                                                                                                                                                                                                                                                                                                         *
                                                                                                                                                                                                                                                                                                                                                         *  const vibrationSensor02 = new Autodesk.DataVisualization.SurfaceShadingPoint(...);
                                                                                                                                                                                                                                                                                                                                                         *  shadingNode.addPoint(vibrationSensor02); // Associate a sensor to the cylinder.
                                                                                                                                                                                                                                                                                                                                                         *
                                                                                                                                                                                                                                                                                                                                                         *  const shadingData = new Autodesk.DataVisualization.SurfaceShadingData();
                                                                                                                                                                                                                                                                                                                                                         *  shadingData.addChild(shadingNode);
                                                                                                                                                                                                                                                                                                                                                         *  shadingData.initialize(model);
                                                                                                                                                                                                                                                                                                                                                         *
                                                                                                                                                                                                                                                                                                                                                         *  dataVizExt.setupSurfaceShading(model, shadingData);
                                                                                                                                                                                                                                                                                                                                                         */value: function initialize(
    model) {
      this.update(model);
    } }]);return SurfaceShadingData;}(SurfaceShadingGroup);


module.exports = {
  SurfaceShadingData: SurfaceShadingData,
  SurfaceShadingGroup: SurfaceShadingGroup,
  SurfaceShadingNode: SurfaceShadingNode,
  SurfaceShadingPoint: SurfaceShadingPoint };

/***/ }),

/***/ "./extensions/DataVisualization/index.js":
/*!***********************************************!*\
  !*** ./extensions/DataVisualization/index.js ***!
  \***********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants.js */ "./extensions/DataVisualization/Constants.js");
/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Constants_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _SceneTool_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SceneTool.js */ "./extensions/DataVisualization/SceneTool.js");
/* harmony import */ var _SpriteMeshBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SpriteMeshBuilder */ "./extensions/DataVisualization/SpriteMeshBuilder.js");
/* harmony import */ var _SpriteMeshBuilder__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_SpriteMeshBuilder__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _CustomViewables__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CustomViewables */ "./extensions/DataVisualization/CustomViewables.js");
/* harmony import */ var _ModelStructureInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ModelStructureInfo */ "./extensions/DataVisualization/ModelStructureInfo.js");
/* harmony import */ var _heatmap_SurfaceShading__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./heatmap/SurfaceShading */ "./extensions/DataVisualization/heatmap/SurfaceShading.js");
/* harmony import */ var _TextureUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TextureUtils */ "./extensions/DataVisualization/TextureUtils.js");
/* harmony import */ var _heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./heatmap/SurfaceShadingData */ "./extensions/DataVisualization/heatmap/SurfaceShadingData.js");
/* harmony import */ var _heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_7__);
function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);} /**
xtension Entry file

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * Examples about how to use this extension can be found:
https://git.autodesk.com/A360/hyperion/blob/develop/client/pages/Heatmap.jsx
https://git.autodesk.com/A360/hyperion/blob/develop/client/pages/Dot.jsx
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * https://git.autodesk.com/A360/hyperion/blob/develop/client/pages/EngineSimulation.jsx
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * https://git.autodesk.com/A360/hyperion/blob/develop/client/pages/ReferenceApp.jsx

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         */










var ns = AutodeskNamespace("Autodesk.DataVisualization");
ns = Object.assign(ns, _CustomViewables__WEBPACK_IMPORTED_MODULE_3__);
ns = Object.assign(ns, _Constants_js__WEBPACK_IMPORTED_MODULE_0___default.a);
ns = Object.assign(ns, _heatmap_SurfaceShadingData__WEBPACK_IMPORTED_MODULE_7__);

ns.Device = _ModelStructureInfo__WEBPACK_IMPORTED_MODULE_4__["Device"];
ns.Room = _ModelStructureInfo__WEBPACK_IMPORTED_MODULE_4__["Room"];
ns.LevelRoomsMap = _ModelStructureInfo__WEBPACK_IMPORTED_MODULE_4__["LevelRoomsMap"];
ns.ModelStructureInfo = _ModelStructureInfo__WEBPACK_IMPORTED_MODULE_4__["ModelStructureInfo"];
ns.SurfaceShading = _heatmap_SurfaceShading__WEBPACK_IMPORTED_MODULE_5__["SurfaceShading"];

var av = Autodesk.Viewing;
var avp = av.Private;

/**
                       * Callback function to retrieve the normalized value of a sensor given a
                       * device identifier and sensor type. The callback function should return a
                       * normalized value in the range of `[0.0, 1.0]`.
                       *
                       * @callback SensorValueCallback
                       * @property {Device} device The client defined device passed in through
                       * a prior call to `ModelStructureInfo.mapDevicesInRoom` method.
                       * @property {string} sensorType An sensor type that was specified when
                       * the `Device` was created.
                       * @returns {number} A normalized sensor value `[0.0, 1.0]`
                       */

/**
                           * Data Visualization extension provides an API for building scenes with
                           * custom sprites (dots) and heatmaps (surface shading) within model boundaries.
                           *
                           * The extension id is: `Autodesk.DataVisualization`
                           *
                           * @example
                           *   const ext = await viewer.loadExtension("Autodesk.DataVisualization")
                           *
                           * @class
                           * @memberof Autodesk.Viewing.Extensions
                           * @alias Autodesk.Viewing.Extensions.DataVisualization
                           * @see {@link Autodesk.Viewing.Extension} for common inherited methods.
                           */var
DataVisualization = /*#__PURE__*/function (_av$Extension) {_inherits(DataVisualization, _av$Extension);var _super = _createSuper(DataVisualization);
  /**
                                                                                                                                                      * @param {Viewer3D} viewer - Viewer instance
                                                                                                                                                      * @param {object} options - Configurations for the extension
                                                                                                                                                      * @class
                                                                                                                                                      */
  function DataVisualization(viewer) {var _this;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};_classCallCheck(this, DataVisualization);
    _this = _super.call(this, viewer, options);
    _this.textureUtility = new _TextureUtils__WEBPACK_IMPORTED_MODULE_6__["TextureUtility"](viewer);

    var terms = "IN ADDITION TO THE FORGE TERMS (INCLUDING WITHOUT LIMITATION, THOSE PERTAINING TO BETA SERVICES), THE FOLLOWING TERMS APPLY TO YOUR USE OF THESE PRIVATE TECH PREVIEW APIS:\nYOU HEREBY ACKNOWLEDGE AND AGREE THAT: (1) THESE PRIVATE TECH PREVIEW APIS (a) HAVE NOT BEEN FULLY TESTED AND MAY CONTAIN DEFECTS OR DEFICIENCIES THAT MAY OR MAY NOT BE CORRECTED BY AUTODESK, AND (b) ARE STILL IN DEVELOPMENT AND CONTINUOUSLY UPDATED, AND MAY UNDERGO SIGNIFICANT CHANGES PRIOR TO RELEASE OF THE CORRESPONDING GENERALLY AVAILABLE VERSION, WHICH VERSION MAY CONTAIN NONE, SOME OR ALL OF THE FEATURES OR FUNCTIONALITY THAT ARE CONTAINED IN THESE PRIVATE TECH PREVIEW APIS, AND (2) YOUR ACCESS TO AND/OR USE OF THESE PRIVATE TECH PREVIEW APIS AND ANY MATERIALS DERIVED THEREFROM (INCLUDING WITHOUT LIMITATION, REFERENCE APPLICATIONS) IS AT YOUR SOLE RISK AND NEITHER AUTODESK NOR ITS SUPPLIERS WILL BE LIABLE FOR ANY DAMAGES WHATSOEVER ARISING FROM OR RELATING TO YOUR USE OR INABILITY TO USE THESE PRIVATE TECH PREVIEW APIS OR DERIVATIVE MATERIALS. NOTWITHSTANDING THE FOREGOING, AUTODESK WILL HAVE NO OBLIGATION TO RELEASE OR MAKE AVAILABLE ANY PRODUCT OR ANY SERVICE BASED ON THESE PRIVATE TECH PREVIEW APIS AND/OR DERIVATIVE MATERIALS.";


    if (options["useInternal"] !== true) {
      alert(terms);
    } else {
      console.warn(terms);
    }return _this;
  }_createClass(DataVisualization, [{ key: "load", value: function () {var _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {var options, sceneBuilder, modelBuilder;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:


                options = {
                  env: "Local",
                  api: undefined,
                  useCredentials: false,
                  useCookie: false,
                  shouldInitializeAuth: false,
                  getAccessToken: null };_context.next = 3;return (


                  this.viewer.loadExtension("Autodesk.Viewing.SceneBuilder"));case 3:sceneBuilder = _context.sent;_context.next = 6;return (
                  sceneBuilder.addNewModel(options));case 6:modelBuilder = _context.sent;

                modelBuilder.model.ignoreRayIntersect = true;
                this.tool = new _SceneTool_js__WEBPACK_IMPORTED_MODULE_1__["SceneTool"](this.viewer, {
                  model: modelBuilder.model });


                this.modelBuilder = modelBuilder;
                this.sceneModel = modelBuilder.model;

                this.sceneModel.getData().fragments.dbId2fragId = {};
                this.sceneModel.useIdBufferSelection = true;

                this.viewer.toolController.registerTool(this.tool);
                this.activate();

                this.deviceDepthOcclusion = false;return _context.abrupt("return",
                true);case 17:case "end":return _context.stop();}}}, _callee, this);}));function load() {return _load.apply(this, arguments);}return load;}() }, { key: "unload", value: function unload()


    {
      this.viewer.toolController.deregisterTool(this.tool);
      this.viewer.impl.unloadModel(this.sceneModel);
      this.removeSurfaceShading();
      this.surfaceShading = null;
      this.deactivate();
      return true;
    } }, { key: "activate", value: function activate()

    {
      this.viewer.toolController.activateTool(this.tool.getName());
      return true;
    } }, { key: "deactivate", value: function deactivate()

    {
      this.viewer.toolController.deactivateTool(this.tool.getName());
      this.removeSurfaceShading();
      this.showTextures();
      return true;
    }

    /**
       * Adds a collection of `CustomViewable` objects for display through
       * the `ViewableData` object that contains them.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#addViewables
       * @param {ViewableData} data The `ViewableData` that contains all
       * the `CustomViewable` objects which are to be added for display.
       */ }, { key: "addViewables", value: function addViewables(
    data) {var _this2 = this;
      var sprite = THREE.ImageUtils.loadTexture(data.spriteAtlas.canvas.toDataURL());
      sprite.minFilter = THREE.LinearFilter;
      sprite.maxFilter = THREE.LinearFilter;
      sprite.flipY = false;

      var material = new THREE.PointCloudMaterial({
        size: data.spriteSize * this.getWindow().devicePixelRatio,
        map: sprite,
        vertexColors: THREE.VertexColors,
        alphaTest: 0.5,
        transparent: true,
        occlusion: 1 });


      material.defines = Object.assign(material.defines || {}, {
        PARTICLE_FRAGMENT: 1,
        USE_VERTEX_ID: 1,
        DEPTH_OCCLUSION: this.deviceDepthOcclusion ? 1 : 0,
        PARTICLE_UV: 1 });


      this.modelBuilder.addMaterial("point1", material, true);
      this.pointMaterial = material;
      this.pointFragments = [];

      this.sceneModel.getData().fragments.viewableData = data;

      var meshCallback = function meshCallback(geometry) {
        // Add the sphere geometry to the model builder
        var fragmentId = _this2.modelBuilder.addFragment(geometry, "point1");
        _this2.pointFragments.push(fragmentId);
        geometry.dbIds.map(function (dbId) {
          _this2.sceneModel.getData().fragments.dbId2fragId[dbId] = fragmentId;
        });
      };

      var builder = new _SpriteMeshBuilder__WEBPACK_IMPORTED_MODULE_2__["SpriteMeshBuilder"](meshCallback);
      var viewables = data.viewables;
      viewables.map(function (item) {
        if (item.position) {
          builder.addPoint(item, data.spriteAtlas);
        }
      });

      builder.flushBuffer();
    }

    /**
       * Removes all viewables from display.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#removeAllViewables
       */ }, { key: "removeAllViewables", value: function removeAllViewables()
    {
      this.modelBuilder.removeFragment(this.pointFragments);
      this.pointFragments = [];
    }

    /**
       * @description Enables or disables depth testing for custom viewable objects.
       * When depth testing is enabled for custom viewables, they will be occluded
       * by objects in the scene that are nearer to the camera. If depth testing is
       * disabled for custom viewables, they will always be visible regardless of
       * other objects that may be blocking them.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#changeOcclusion
       * @param {boolean} enable Indicates if occlusion should be enabled. Set
       * this parameter to `true` to enable depth testing for custom viewables,
       * or `false` otherwise.
       */ }, { key: "changeOcclusion", value: function changeOcclusion(
    enable) {
      if (this.deviceDepthOcclusion != enable) {
        this.deviceDepthOcclusion = enable;
        var occlusion = enable ? 1 : 0;
        if (this.pointMaterial && this.pointMaterial.program) {
          this.pointMaterial.defines["DEPTH_OCCLUSION"] = occlusion;
          this.pointMaterial.needsUpdate = true;
        }
        this.viewer.impl.invalidate(true);
      }
    }

    /**
       * Sets the visibility and occlusion for these custom viewables.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#showHideViewables
       * @param {boolean} visible Indicates if all custom viewables should be visible.
       * Set this to `true` to display all custom viewables, or `false` otherwise.
       * @param {boolean} occlusion Indicates if occlusion should be enabled. If
       * this parameter is set to `true`, depth testing will be enabled for custom
       * viewables, causing them to be occluded by objects that are nearer to the
       * camera. Set this to `false` in order to always display custom viewables on
       * top of the view and not be occluded by other objects in the scene.
       */ }, { key: "showHideViewables", value: function showHideViewables(
    visible, occlusion) {var _this3 = this;
      this.changeOcclusion(occlusion);
      this.pointFragments.forEach(function (fragId) {
        _this3.sceneModel.setVisibility(fragId, visible);
      });
      this.viewer.impl.invalidate(true);
    }

    /**
       * Highlights one or more existing custom viewables in the scene.
       * Highlighted viewables can be cleared with `clearHighlightedViewables` API.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#highlightViewables
       * @param {number|number[]} dbIds The `DbId` of one or more custom viewables
       * to highlight.
       */ }, { key: "highlightViewables", value: function highlightViewables(
    dbIds) {
      if (this.tool) {
        this.tool.markObject(dbIds);
      }
    }

    /**
       * Clears any existing highlighted custom viewable that was highlighted
       * with a prior call to `highlightViewables` API.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#clearHighlightedViewables
       */ }, { key: "clearHighlightedViewables", value: function clearHighlightedViewables()
    {
      if (this.tool) {
        this.tool.clearMarkedObject();
      }
    }

    /**
       * Enables texture display in the current scene.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#showTextures
       */ }, { key: "showTextures", value: function showTextures()
    {
      this.textureUtility.showTextures();
    }

    /**
       * Disables texture display in the current scene.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#hideTextures
       */ }, { key: "hideTextures", value: function hideTextures()
    {
      this.textureUtility.hideTextures();
    }

    /**
       * Sets up surface shading (heatmap display) for the model.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#setupSurfaceShading
       * @param {Model} model The model to set up the shading for. It is used to
       * establish connections between `DbId` and the corresponding fragments
       * so that heatmap can be rendered. Note that this model may not always
       * be the same one representing the main loaded model. If the shading is
       * set up for models built by `SceneBuilder`, then this parameter should
       * be the model within that same `SceneBuilder`. See example for more.
       * @param {SurfaceShadingData} shadingData The surface shading data generated
       * with a prior call to `ModelStructureInfo.generateSurfaceShadingData`.
       * This value is used to set up the surface shading.
       *
       * @example
       *  // 'devices' is a list of 'Device' objects
       *  const info = new Autodesk.DataVisualization.ModelStructureInfo(model);
       *  const shadingData = await info.generateSurfaceShadingData(devices);
       *
       *  // The call to 'generateSurfaceShadingData' above generates 'shadingData'
       *  // based on 'model' that is passed to 'ModelStructureInfo', therefore the
       *  // 'DbId' within 'shadingData' are all originated from the same 'model'.
       *  // In this case, the first parameter is the same 'model' above.
       *  //
       *  dataVizExtn.setupSurfaceShading(model, shadingData);
       *
       *  // If the 'SurfaceShadingData' passed to 'setupSurfaceShading' is constructed
       *  // with 'DbId' coming from a 'SceneBuilder', then the first parameter must be
       *  // the same model that 'SurfaceShadingData' was created from:
       *  //
       *  // const anotherModel = sceneBuilder.modelBuilder.model;
       *  // dataVizExtn.setupSurfaceShading(anotherModel, shadingData);
       */ }, { key: "setupSurfaceShading", value: function setupSurfaceShading(
    model, shadingData) {
      if (this.surfaceShading) {
        this.surfaceShading.cleanUp();
      }

      this.surfaceShading = new _heatmap_SurfaceShading__WEBPACK_IMPORTED_MODULE_5__["SurfaceShading"](this.viewer, model, shadingData);
    }

    /**
       * Renders one or more nodes with the given identifiers. This call creates
       * necessary resources like overlay scene and materials, therefore is by
       * design to be called only when necessary (i.e., when surface shading needs
       * to be updated due to geometry changes). For more lightweight
       * rendering, `updateSurfaceShading` API should be used instead.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#renderSurfaceShading
       * @param {string|string[]} nodeIds One or more identifiers of nodes
       * to render. These identifiers are among the ones provided
       * through `SurfaceShadingData` in a prior call to `setupSurfaceShading` API.
       * @param {string} sensorType The type of sensor to render the shading for.
       * @param {SensorValueCallback} valueCallback The callback function that
       * will be invoked when surface shading requires the sensor value to render.
       * @param {number} confidenceSize The confidence size.
       *
       * @example
       *  // This callback will be invoked multiple times for each call to
       *  // 'renderSurfaceShading' below, once for each of the devices on
       *  // the floor.
       *  function getSensorValue(deviceInfo, sensorType) {
       *      const deviceId = deviceInfo.id;
       *      const sensorValue = readSensorValue(deviceId, sensorType);
       *      return clamp(sensorValue, 0.0, 1.0); // Normalize sensor value
       *  }
       *
       *  function onFloorSelectedOnUi(floorName) {
       *      const sensorType = "CO₂";
       *      dataVizExtn.renderSurfaceShading(floorName, sensorType, getSensorValue);
       *  }
       */ }, { key: "renderSurfaceShading", value: function renderSurfaceShading(
    nodeIds, sensorType, valueCallback) {var confidenceSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 160;
      if (this.surfaceShading) {
        this.surfaceShading.render(nodeIds, sensorType, valueCallback, confidenceSize);
      } else {
        avp.logger.error("Please call setupSurfaceShading first");
      }
    }

    /**
       * Updates the surface shading (heatmap) with the latest sensor values.
       * This API simply updates the resources created in a prior call to
       * the `renderSurfaceShading` without recreating them, therefore it is
       * a more lightweight alternatives suited for high frequency calls.
       * @alias Autodesk.Viewing.Extensions.DataVisualization#updateSurfaceShading
       * @param {SensorValueCallback} valueCallback The callback function that
       * will be invoked when surface shading requires the sensor value to render.
       * 
       * @example
       *  let seconds; // Selected time on the UI
       *  
       *  // This callback will be invoked multiple times for each call to
       *  // 'renderSurfaceShading' below, once for each of the devices on
       *  // the floor.
       *  function getSensorValue(deviceInfo, sensorType) {
       *      const deviceId = deviceInfo.id;
       *      const sensorValue = readSensorValue(deviceId, sensorType, seconds);
       *      return clamp(sensorValue, 0.0, 1.0); // Normalize sensor value
       *  }
       *
       *  // Handler for slider events that is triggered rapidly
       *  function onTimeSliderValueChanged(timeInSeconds) {
       *      seconds = timeInSeconds;
       *      dataVizExtn.updateSurfaceShading(getSensorValue);
       *  }
       */ }, { key: "updateSurfaceShading", value: function updateSurfaceShading(
    valueCallback) {
      if (this.surfaceShading) {
        this.surfaceShading.updateShading(valueCallback);
      } else {
        avp.logger.error("Please call setupSurfaceShading first");
      }
    }

    /**
       * Registers color stops for use in heatmap colorization. The specified color
       * stops evenly spread out across the spectrum that represents the normalized
       * sensor values ranging between 0.0 and 1.0.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#registerSurfaceShadingColors
       *
       * @param {string} sensorType The sensor type to define the color stops for.
       * @param {number[]} colors An array of color values, each expressed in a
       * 3-byte (24-bit) numerical value. Note that it is possible to specify a
       * 4-byte (32-bit) number as color, but only 3 lower bytes will be taken.
       * Each of the three bytes represents the intensity value between `0` and `255`,
       * of red, green, blue color component respectively. For example, `0xff0000`
       * represents a red color with full intensity.
       *
       * @example
       *  // Register 3 color stops for CO₂ sensor values
       *  const dataVizExt = await viewer.loadExtension("Autodesk.DataVisualization");
       *  dataVizExt.registerSurfaceShadingColors("CO₂", [0x0f2027, 0x203a43, 0x2c5364]);
       */ }, { key: "registerSurfaceShadingColors", value: function registerSurfaceShadingColors(
    sensorType, colors) {
      if (this.surfaceShading) {
        this.surfaceShading.registerSensorColors(sensorType, colors);
      } else {
        avp.logger.error("Please call setupSurfaceShading first");
      }
    }

    /**
       * Removes any surface shading created by clearing the overlay
       * which holds the meshes used as heatmap representation.
       *
       * @alias Autodesk.Viewing.Extensions.DataVisualization#removeSurfaceShading
       */ }, { key: "removeSurfaceShading", value: function removeSurfaceShading()
    {
      if (this.surfaceShading) {
        this.surfaceShading.removeShading();
      }
    } }]);return DataVisualization;}(av.Extension);


av.theExtensionManager.registerExtension("Autodesk.DataVisualization", DataVisualization);

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/q/q.js":
/*!*****************************!*\
  !*** ./node_modules/q/q.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    "use strict";

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (true) {
        module.exports = definition();

    // RequireJS
    } else { var previousQ, global; }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    // queue for late tasks, used by unhandled rejection tracking
    var laterQueue = [];

    function flush() {
        /* jshint loopfunc: true */
        var task, domain;

        while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }
            runSingle(task, domain);

        }
        while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
        }
        flushing = false;
    }
    // runs a single function in the async queue
    function runSingle(task, domain) {
        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process === "object" &&
        process.toString() === "[object process]" && process.nextTick) {
        // Ensure Q is in a real Node environment, with a `process.nextTick`.
        // To see through fake Node environments:
        // * Mocha test runner - exposes a `process` global without a `nextTick`
        // * Browserify - exposes a `process.nexTick` function that uses
        //   `setTimeout`. In this case `setImmediate` is preferred because
        //    it is faster. Browserify's `process.toString()` yields
        //   "[object Object]", while in a real Node environment
        //   `process.nextTick()` yields "[object process]".
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }
    // runs a task after all other tasks have been run
    // this is useful for unhandled rejection tracking that needs to happen
    // after all `then`d tasks have been run.
    nextTick.runAfter = function (task) {
        laterQueue.push(task);
        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };
    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

// enable long stacks if Q_DEBUG is set
if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
Q.race = race;
function race(answerPs) {
    return promise(function (resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function (answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var reportedUnhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }
    if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
            if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise);
                reportedUnhandledRejections.push(promise);
            }
        });
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise);
                if (atReport !== -1) {
                    process.emit("rejectionHandled", unhandledReasons[at], promise);
                    reportedUnhandledRejections.splice(atReport, 1);
                }
            });
        }
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var pendingCount = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++pendingCount;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--pendingCount === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (pendingCount === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Returns the first resolved promise of an array. Prior rejected promises are
 * ignored.  Rejects only if all promises are rejected.
 * @param {Array*} an array containing values or promises for values
 * @returns a promise fulfilled with the value of the first resolved promise,
 * or a rejected promise if all promises are rejected.
 */
Q.any = any;

function any(promises) {
    if (promises.length === 0) {
        return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
        var promise = promises[index];

        pendingCount++;

        when(promise, onFulfilled, onRejected, onProgress);
        function onFulfilled(result) {
            deferred.resolve(result);
        }
        function onRejected() {
            pendingCount--;
            if (pendingCount === 0) {
                deferred.reject(new Error(
                    "Can't get fulfillment value from any promise, all " +
                    "promises were rejected."
                ));
            }
        }
        function onProgress(progress) {
            deferred.notify({
                index: index,
                value: progress
            });
        }
    }, undefined);

    return deferred.promise;
}

Promise.prototype.any = function () {
    return any(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

Q.noConflict = function() {
    throw new Error("Q.noConflict only works when Q is used as a global");
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "three":
/*!************************!*\
  !*** external "THREE" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = THREE;

/***/ })

/******/ });
//# sourceMappingURL=DataVisualization.js.map